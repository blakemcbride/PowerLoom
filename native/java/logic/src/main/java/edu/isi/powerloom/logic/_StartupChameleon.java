//  -*- Mode: Java -*-
//
// _StartupChameleon.java

/*
 +---------------------------- BEGIN LICENSE BLOCK ---------------------------+
 |                                                                            |
 | Version: MPL 1.1/GPL 2.0/LGPL 2.1                                          |
 |                                                                            |
 | The contents of this file are subject to the Mozilla Public License        |
 | Version 1.1 (the "License"); you may not use this file except in           |
 | compliance with the License. You may obtain a copy of the License at       |
 | http://www.mozilla.org/MPL/                                                |
 |                                                                            |
 | Software distributed under the License is distributed on an "AS IS" basis, |
 | WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License   |
 | for the specific language governing rights and limitations under the       |
 | License.                                                                   |
 |                                                                            |
 | The Original Code is the PowerLoom KR&R System.                            |
 |                                                                            |
 | The Initial Developer of the Original Code is                              |
 | UNIVERSITY OF SOUTHERN CALIFORNIA, INFORMATION SCIENCES INSTITUTE          |
 | 4676 Admiralty Way, Marina Del Rey, California 90292, U.S.A.               |
 |                                                                            |
 | Portions created by the Initial Developer are Copyright (C) 1997-2023      |
 | the Initial Developer. All Rights Reserved.                                |
 |                                                                            |
 | Contributor(s):                                                            |
 |                                                                            |
 | Alternatively, the contents of this file may be used under the terms of    |
 | either the GNU General Public License Version 2 or later (the "GPL"), or   |
 | the GNU Lesser General Public License Version 2.1 or later (the "LGPL"),   |
 | in which case the provisions of the GPL or the LGPL are applicable instead |
 | of those above. If you wish to allow use of your version of this file only |
 | under the terms of either the GPL or the LGPL, and not to allow others to  |
 | use your version of this file under the terms of the MPL, indicate your    |
 | decision by deleting the provisions above and replace them with the notice |
 | and other provisions required by the GPL or the LGPL. If you do not delete |
 | the provisions above, a recipient may use your version of this file under  |
 | the terms of any one of the MPL, the GPL or the LGPL.                      |
 |                                                                            |
 +----------------------------- END LICENSE BLOCK ----------------------------+
*/

package edu.isi.powerloom.logic;

import edu.isi.stella.javalib.Native;
import edu.isi.stella.javalib.StellaSpecialVariable;
import edu.isi.stella.*;

public class _StartupChameleon {
  static void helpStartupChameleon1() {
    {
      Logic.SGT_CHAMELEON_TRUTH_VALUE_RELATION = ((Surrogate)(GeneralizedSymbol.internRigidSymbolWrtModule("TRUTH-VALUE-RELATION", Stella.getStellaModule("/CHAMELEON", true), 1)));
      Logic.SGT_CHAMELEON_VECTOR_RELATION = ((Surrogate)(GeneralizedSymbol.internRigidSymbolWrtModule("VECTOR-RELATION", Stella.getStellaModule("/CHAMELEON", true), 1)));
      Logic.SGT_CHAMELEON_IGNORED_VALUE_RELATION = ((Surrogate)(GeneralizedSymbol.internRigidSymbolWrtModule("IGNORED-VALUE-RELATION", Stella.getStellaModule("/CHAMELEON", true), 1)));
      Logic.SGT_CHAMELEON_PRIMITIVE_VALUE_RELATION = ((Surrogate)(GeneralizedSymbol.internRigidSymbolWrtModule("PRIMITIVE-VALUE-RELATION", Stella.getStellaModule("/CHAMELEON", true), 1)));
      Logic.SGT_LOGIC_CHAMELEON_PARTIAL_MATCH = ((Surrogate)(GeneralizedSymbol.internRigidSymbolWrtModule("CHAMELEON-PARTIAL-MATCH", null, 1)));
      Logic.SYM_LOGIC_ARGUMENT_JUSTIFICATIONS = ((Symbol)(GeneralizedSymbol.internRigidSymbolWrtModule("ARGUMENT-JUSTIFICATIONS", null, 0)));
      Logic.SYM_LOGIC_ARGUMENT_PROPOSITIONS = ((Symbol)(GeneralizedSymbol.internRigidSymbolWrtModule("ARGUMENT-PROPOSITIONS", null, 0)));
      Logic.KWD_OTHER = ((Keyword)(GeneralizedSymbol.internRigidSymbolWrtModule("OTHER", null, 2)));
      Logic.KWD_VARIANT1 = ((Keyword)(GeneralizedSymbol.internRigidSymbolWrtModule("VARIANT1", null, 2)));
      Logic.KWD_VARIANT2 = ((Keyword)(GeneralizedSymbol.internRigidSymbolWrtModule("VARIANT2", null, 2)));
      Logic.KWD_MULTIPLE_PROOFS = ((Keyword)(GeneralizedSymbol.internRigidSymbolWrtModule("MULTIPLE-PROOFS", null, 2)));
      Logic.KWD_ORIGINAL = ((Keyword)(GeneralizedSymbol.internRigidSymbolWrtModule("ORIGINAL", null, 2)));
      Logic.KWD_PROPOSITION = ((Keyword)(GeneralizedSymbol.internRigidSymbolWrtModule("PROPOSITION", null, 2)));
      Logic.KWD_CHAMELEON = ((Keyword)(GeneralizedSymbol.internRigidSymbolWrtModule("CHAMELEON", null, 2)));
      Logic.KWD_CHAMELEON_BATCH = ((Keyword)(GeneralizedSymbol.internRigidSymbolWrtModule("CHAMELEON-BATCH", null, 2)));
      Logic.KWD_TENSORFLOW = ((Keyword)(GeneralizedSymbol.internRigidSymbolWrtModule("TENSORFLOW", null, 2)));
      Logic.KWD_TENSORFLOW_BATCH = ((Keyword)(GeneralizedSymbol.internRigidSymbolWrtModule("TENSORFLOW-BATCH", null, 2)));
      Logic.KWD_IGNORED_VALUE = ((Keyword)(GeneralizedSymbol.internRigidSymbolWrtModule("IGNORED-VALUE", null, 2)));
      Logic.KWD_VECTOR = ((Keyword)(GeneralizedSymbol.internRigidSymbolWrtModule("VECTOR", null, 2)));
      Logic.SGT_LOGIC_M_NEURAL_NETWORKdTRUTH_VALUE_ARGUMENT_INDEX_MEMO_TABLE_000 = ((Surrogate)(GeneralizedSymbol.internRigidSymbolWrtModule("M-NEURAL-NETWORK.TRUTH-VALUE-ARGUMENT-INDEX-MEMO-TABLE-000", null, 1)));
      Logic.SGT_STELLA_SEQUENCE = ((Surrogate)(GeneralizedSymbol.internRigidSymbolWrtModule("SEQUENCE", Stella.getStellaModule("/STELLA", true), 1)));
      Logic.SGT_STELLA_ITERATOR = ((Surrogate)(GeneralizedSymbol.internRigidSymbolWrtModule("ITERATOR", Stella.getStellaModule("/STELLA", true), 1)));
      Logic.SGT_LOGIC_CHAMELEON_NEURAL_NETWORK = ((Surrogate)(GeneralizedSymbol.internRigidSymbolWrtModule("CHAMELEON-NEURAL-NETWORK", null, 1)));
      Logic.SYM_LOGIC_OUTPUT_ERROR = ((Symbol)(GeneralizedSymbol.internRigidSymbolWrtModule("OUTPUT-ERROR", null, 0)));
      Logic.SGT_STELLA_FLOAT_ARRAY = ((Surrogate)(GeneralizedSymbol.internRigidSymbolWrtModule("FLOAT-ARRAY", Stella.getStellaModule("/STELLA", true), 1)));
      Logic.SGT_LOGIC_VECTOR_NEURAL_NETWORK = ((Surrogate)(GeneralizedSymbol.internRigidSymbolWrtModule("VECTOR-NEURAL-NETWORK", null, 1)));
      Logic.SYM_LOGIC_N_VECTOR_ARGUMENTS = ((Symbol)(GeneralizedSymbol.internRigidSymbolWrtModule("N-VECTOR-ARGUMENTS", null, 0)));
      Logic.SYM_LOGIC_N_VECTOR_ARGUMENT_SPECS = ((Symbol)(GeneralizedSymbol.internRigidSymbolWrtModule("N-VECTOR-ARGUMENT-SPECS", null, 0)));
      Logic.SYM_LOGIC_N_VECTOR_ARGUMENT_INPUTS = ((Symbol)(GeneralizedSymbol.internRigidSymbolWrtModule("N-VECTOR-ARGUMENT-INPUTS", null, 0)));
      Logic.SGT_LOGIC_M_VECTOR_NEURAL_NETWORKdVECTOR_ARGUMENT_INDEX_MEMO_TABLE_000 = ((Surrogate)(GeneralizedSymbol.internRigidSymbolWrtModule("M-VECTOR-NEURAL-NETWORK.VECTOR-ARGUMENT-INDEX-MEMO-TABLE-000", null, 1)));
      Logic.SGT_CHAMELEON_VECTOR_ARITY = ((Surrogate)(GeneralizedSymbol.internRigidSymbolWrtModule("VECTOR-ARITY", Stella.getStellaModule("/CHAMELEON", true), 1)));
      Logic.SGT_CHAMELEON_VECTOR_DIMENSIONS = ((Surrogate)(GeneralizedSymbol.internRigidSymbolWrtModule("VECTOR-DIMENSIONS", Stella.getStellaModule("/CHAMELEON", true), 1)));
      Logic.SGT_LOGIC_TENSORFLOW_NEURAL_NETWORK = ((Surrogate)(GeneralizedSymbol.internRigidSymbolWrtModule("TENSORFLOW-NEURAL-NETWORK", null, 1)));
      Logic.SYM_LOGIC_MODEL = ((Symbol)(GeneralizedSymbol.internRigidSymbolWrtModule("MODEL", null, 0)));
      Logic.SYM_LOGIC_TENSORFLOW_NEURAL_NETWORKdBUILD_PROPOSITION_NETWORK = ((Symbol)(GeneralizedSymbol.internRigidSymbolWrtModule("TENSORFLOW-NEURAL-NETWORK.BUILD-PROPOSITION-NETWORK", null, 0)));
      Logic.SYM_LOGIC_TENSORFLOW_NEURAL_NETWORKdALLOCATE_NETWORK_ARRAYS = ((Symbol)(GeneralizedSymbol.internRigidSymbolWrtModule("TENSORFLOW-NEURAL-NETWORK.ALLOCATE-NETWORK-ARRAYS", null, 0)));
      Logic.SYM_LOGIC_TENSORFLOW_NEURAL_NETWORKdRANDOMIZE_NETWORK_WEIGHTS = ((Symbol)(GeneralizedSymbol.internRigidSymbolWrtModule("TENSORFLOW-NEURAL-NETWORK.RANDOMIZE-NETWORK-WEIGHTS", null, 0)));
      Logic.SYM_LOGIC_TENSORFLOW_NEURAL_NETWORKdINITIALIZE_NETWORK_WEIGHTS = ((Symbol)(GeneralizedSymbol.internRigidSymbolWrtModule("TENSORFLOW-NEURAL-NETWORK.INITIALIZE-NETWORK-WEIGHTS", null, 0)));
      Logic.SYM_LOGIC_TENSORFLOW_NEURAL_NETWORKdNUMBER_OF_INPUTS = ((Symbol)(GeneralizedSymbol.internRigidSymbolWrtModule("TENSORFLOW-NEURAL-NETWORK.NUMBER-OF-INPUTS", null, 0)));
      Logic.SYM_LOGIC_TENSORFLOW_NEURAL_NETWORKdNTH_INPUT = ((Symbol)(GeneralizedSymbol.internRigidSymbolWrtModule("TENSORFLOW-NEURAL-NETWORK.NTH-INPUT", null, 0)));
      Logic.SYM_LOGIC_TENSORFLOW_NEURAL_NETWORKdNTH_INPUT_ERROR = ((Symbol)(GeneralizedSymbol.internRigidSymbolWrtModule("TENSORFLOW-NEURAL-NETWORK.NTH-INPUT-ERROR", null, 0)));
      Logic.SYM_LOGIC_TENSORFLOW_NEURAL_NETWORKdSET_INPUT_VALUES = ((Symbol)(GeneralizedSymbol.internRigidSymbolWrtModule("TENSORFLOW-NEURAL-NETWORK.SET-INPUT-VALUES", null, 0)));
      Logic.SYM_LOGIC_TENSORFLOW_NEURAL_NETWORKdSET_VECTOR_INPUT_VALUES = ((Symbol)(GeneralizedSymbol.internRigidSymbolWrtModule("TENSORFLOW-NEURAL-NETWORK.SET-VECTOR-INPUT-VALUES", null, 0)));
      Logic.SYM_LOGIC_TENSORFLOW_NEURAL_NETWORKdFORWARD_PROPAGATE_INPUTS = ((Symbol)(GeneralizedSymbol.internRigidSymbolWrtModule("TENSORFLOW-NEURAL-NETWORK.FORWARD-PROPAGATE-INPUTS", null, 0)));
      Logic.SYM_LOGIC_TENSORFLOW_NEURAL_NETWORKdBACKWARD_PROPAGATE_ERROR = ((Symbol)(GeneralizedSymbol.internRigidSymbolWrtModule("TENSORFLOW-NEURAL-NETWORK.BACKWARD-PROPAGATE-ERROR", null, 0)));
      Logic.SYM_LOGIC_TENSORFLOW_NEURAL_NETWORKdUPDATE_NETWORK_WEIGHTS = ((Symbol)(GeneralizedSymbol.internRigidSymbolWrtModule("TENSORFLOW-NEURAL-NETWORK.UPDATE-NETWORK-WEIGHTS", null, 0)));
      Logic.SGT_LOGIC_CHAMELEON_BATCH_NEURAL_NETWORK = ((Surrogate)(GeneralizedSymbol.internRigidSymbolWrtModule("CHAMELEON-BATCH-NEURAL-NETWORK", null, 1)));
      Logic.SYM_LOGIC_INPUT_BATCH = ((Symbol)(GeneralizedSymbol.internRigidSymbolWrtModule("INPUT-BATCH", null, 0)));
      Logic.SYM_LOGIC_KEY_BATCH = ((Symbol)(GeneralizedSymbol.internRigidSymbolWrtModule("KEY-BATCH", null, 0)));
      Logic.SYM_LOGIC_TARGET_BATCH = ((Symbol)(GeneralizedSymbol.internRigidSymbolWrtModule("TARGET-BATCH", null, 0)));
      Logic.SYM_LOGIC_OUTPUT_BATCH = ((Symbol)(GeneralizedSymbol.internRigidSymbolWrtModule("OUTPUT-BATCH", null, 0)));
      Logic.SYM_LOGIC_INPUT_ERROR_BATCH = ((Symbol)(GeneralizedSymbol.internRigidSymbolWrtModule("INPUT-ERROR-BATCH", null, 0)));
      Logic.SGT_LOGIC_2D_LONG_ARRAY = ((Surrogate)(GeneralizedSymbol.internRigidSymbolWrtModule("2D-LONG-ARRAY", null, 1)));
      Logic.SGT_LOGIC_TENSORFLOW_BATCH_NEURAL_NETWORK = ((Surrogate)(GeneralizedSymbol.internRigidSymbolWrtModule("TENSORFLOW-BATCH-NEURAL-NETWORK", null, 1)));
      Logic.SYM_LOGIC_INPUT_MODIFIEDp = ((Symbol)(GeneralizedSymbol.internRigidSymbolWrtModule("INPUT-MODIFIED?", null, 0)));
      Logic.SYM_LOGIC_INPUT_BATCH_LENGTH = ((Symbol)(GeneralizedSymbol.internRigidSymbolWrtModule("INPUT-BATCH-LENGTH", null, 0)));
      Logic.SYM_LOGIC_VECTOR_BATCH = ((Symbol)(GeneralizedSymbol.internRigidSymbolWrtModule("VECTOR-BATCH", null, 0)));
      Logic.SYM_LOGIC_VECTOR_BATCH_LENGTH = ((Symbol)(GeneralizedSymbol.internRigidSymbolWrtModule("VECTOR-BATCH-LENGTH", null, 0)));
      Logic.SYM_LOGIC_TARGET_BATCH_LENGTH = ((Symbol)(GeneralizedSymbol.internRigidSymbolWrtModule("TARGET-BATCH-LENGTH", null, 0)));
      Logic.SYM_LOGIC_TENSORFLOW_BATCH_NEURAL_NETWORKdBATCH_FORWARD_PROPAGATE_INPUTS = ((Symbol)(GeneralizedSymbol.internRigidSymbolWrtModule("TENSORFLOW-BATCH-NEURAL-NETWORK.BATCH-FORWARD-PROPAGATE-INPUTS", null, 0)));
    }
  }

  static void helpStartupChameleon2() {
    {
      Logic.SYM_LOGIC_TENSORFLOW_BATCH_NEURAL_NETWORKdBATCH_BACKWARD_PROPAGATE_ERROR = ((Symbol)(GeneralizedSymbol.internRigidSymbolWrtModule("TENSORFLOW-BATCH-NEURAL-NETWORK.BATCH-BACKWARD-PROPAGATE-ERROR", null, 0)));
      Logic.SYM_LOGIC_TENSORFLOW_BATCH_NEURAL_NETWORKdBATCH_UPDATE_NETWORK_WEIGHTS = ((Symbol)(GeneralizedSymbol.internRigidSymbolWrtModule("TENSORFLOW-BATCH-NEURAL-NETWORK.BATCH-UPDATE-NETWORK-WEIGHTS", null, 0)));
      Logic.SGT_LOGIC_NETWORK_PROOF_QUEUE = ((Surrogate)(GeneralizedSymbol.internRigidSymbolWrtModule("NETWORK-PROOF-QUEUE", null, 1)));
      Logic.SYM_LOGIC_DEPENDENTS = ((Symbol)(GeneralizedSymbol.internRigidSymbolWrtModule("DEPENDENTS", null, 0)));
      Logic.SYM_LOGIC_PREREQUISITES = ((Symbol)(GeneralizedSymbol.internRigidSymbolWrtModule("PREREQUISITES", null, 0)));
      Logic.SYM_LOGIC_ACTIVE_NETWORKS = ((Symbol)(GeneralizedSymbol.internRigidSymbolWrtModule("ACTIVE-NETWORKS", null, 0)));
      Logic.SYM_LOGIC_MIN_BATCH_SIZE = ((Symbol)(GeneralizedSymbol.internRigidSymbolWrtModule("MIN-BATCH-SIZE", null, 0)));
      Logic.SYM_LOGIC_N_QUEUED = ((Symbol)(GeneralizedSymbol.internRigidSymbolWrtModule("N-QUEUED", null, 0)));
      Logic.SGT_LOGIC_NETWORK_PROOF_FORWARD_QUEUE = ((Surrogate)(GeneralizedSymbol.internRigidSymbolWrtModule("NETWORK-PROOF-FORWARD-QUEUE", null, 1)));
      Logic.SGT_LOGIC_NETWORK_PROOF_BACKWARD_QUEUE = ((Surrogate)(GeneralizedSymbol.internRigidSymbolWrtModule("NETWORK-PROOF-BACKWARD-QUEUE", null, 1)));
      Logic.SGT_LOGIC_NETWORK_PROOF_UPDATE_QUEUE = ((Surrogate)(GeneralizedSymbol.internRigidSymbolWrtModule("NETWORK-PROOF-UPDATE-QUEUE", null, 1)));
      Logic.KWD_N_TRAIN = ((Keyword)(GeneralizedSymbol.internRigidSymbolWrtModule("N-TRAIN", null, 2)));
      Logic.SYM_CHAMELEON_TRAINING_EXAMPLE = ((Symbol)(GeneralizedSymbol.internRigidSymbolWrtModule("TRAINING-EXAMPLE", Stella.getStellaModule("/CHAMELEON", true), 0)));
      Logic.SYM_LOGIC_pS = ((Symbol)(GeneralizedSymbol.internRigidSymbolWrtModule("?S", null, 0)));
      Logic.KWD_SHUFFLEp = ((Keyword)(GeneralizedSymbol.internRigidSymbolWrtModule("SHUFFLE?", null, 2)));
      Logic.KWD_OPTIONS = ((Keyword)(GeneralizedSymbol.internRigidSymbolWrtModule("OPTIONS", null, 2)));
      Logic.KWD_EPOCHS = ((Keyword)(GeneralizedSymbol.internRigidSymbolWrtModule("EPOCHS", null, 2)));
      Logic.KWD_PRINT_CYCLE = ((Keyword)(GeneralizedSymbol.internRigidSymbolWrtModule("PRINT-CYCLE", null, 2)));
      Logic.KWD_ERROR_CUTOFF = ((Keyword)(GeneralizedSymbol.internRigidSymbolWrtModule("ERROR-CUTOFF", null, 2)));
      Logic.KWD_BATCHp = ((Keyword)(GeneralizedSymbol.internRigidSymbolWrtModule("BATCH?", null, 2)));
      Logic.KWD_EXAMPLES = ((Keyword)(GeneralizedSymbol.internRigidSymbolWrtModule("EXAMPLES", null, 2)));
      Logic.SGT_STELLA_OBJECT = ((Surrogate)(GeneralizedSymbol.internRigidSymbolWrtModule("OBJECT", Stella.getStellaModule("/STELLA", true), 1)));
      Logic.SGT_LOGIC_SCORED_QUERY_PROOF_ADJUNCT = ((Surrogate)(GeneralizedSymbol.internRigidSymbolWrtModule("SCORED-QUERY-PROOF-ADJUNCT", null, 1)));
      Logic.SYM_LOGIC_DOWN_FRAME = ((Symbol)(GeneralizedSymbol.internRigidSymbolWrtModule("DOWN-FRAME", null, 0)));
      Logic.SYM_LOGIC_PROOF_ADJUNCT = ((Symbol)(GeneralizedSymbol.internRigidSymbolWrtModule("PROOF-ADJUNCT", null, 0)));
      Logic.KWD_TERMINAL_FAILURE = ((Keyword)(GeneralizedSymbol.internRigidSymbolWrtModule("TERMINAL-FAILURE", null, 2)));
      Logic.KWD_SCORED_QUERY = ((Keyword)(GeneralizedSymbol.internRigidSymbolWrtModule("SCORED-QUERY", null, 2)));
      Logic.SYM_LOGIC_STARTUP_CHAMELEON = ((Symbol)(GeneralizedSymbol.internRigidSymbolWrtModule("STARTUP-CHAMELEON", null, 0)));
    }
  }

  static void helpStartupChameleon3() {
    {
      { Stella_Class renamed_Class = Stella.defineClassFromStringifiedSource("CHAMELEON-PARTIAL-MATCH", "(DEFCLASS CHAMELEON-PARTIAL-MATCH (INCREMENTAL-PARTIAL-MATCH) :DOCUMENTATION \"Variant of :BASIC partial match strategy to support CHAMELEON queries.\" :SLOTS ((ARGUMENT-JUSTIFICATIONS :TYPE (CONS OF JUSTIFICATION) :INITIALLY NIL :DOCUMENTATION \"Holds justifications for OR arguments and alternative rules.\") (ARGUMENT-PROPOSITIONS :TYPE (CONS OF PROPOSITION) :INITIALLY NIL :DOCUMENTATION \"Holds argument propositions in the order they are associated with scores\")))");

        renamed_Class.classConstructorCode = Native.find_java_method("edu.isi.powerloom.logic.ChameleonPartialMatch", "newChameleonPartialMatch", new java.lang.Class [] {Native.find_java_class("edu.isi.stella.Keyword"), Native.find_java_class("edu.isi.powerloom.logic.ControlFrame")});
        renamed_Class.classSlotAccessorCode = Native.find_java_method("edu.isi.powerloom.logic.ChameleonPartialMatch", "accessChameleonPartialMatchSlotValue", new java.lang.Class [] {Native.find_java_class("edu.isi.powerloom.logic.ChameleonPartialMatch"), Native.find_java_class("edu.isi.stella.Symbol"), Native.find_java_class("edu.isi.stella.Stella_Object"), java.lang.Boolean.TYPE});
      }
      { Stella_Class renamed_Class = Stella.defineClassFromStringifiedSource("CHAMELEON-NEURAL-NETWORK", "(DEFCLASS CHAMELEON-NEURAL-NETWORK (NEURAL-NETWORK) :DOCUMENTATION \"Stream-lined neural network structure that doesn't require float wrapping.\" :SLOTS ((PROPOSITION :TYPE PROPOSITION) (INPUT :TYPE FLOAT-ARRAY) (HIDDEN :TYPE FLOAT-ARRAY) (OUTPUT :TYPE FLOAT) (IH :TYPE 2D-FLOAT-ARRAY) (HO :TYPE FLOAT-ARRAY) (INPUT-ERROR :TYPE FLOAT-ARRAY) (HIDDEN-ERROR :TYPE FLOAT-ARRAY) (OUTPUT-ERROR :TYPE FLOAT) (IH-DELTA :TYPE 2D-FLOAT-ARRAY) (HO-DELTA :TYPE FLOAT-ARRAY)))");

        renamed_Class.classConstructorCode = Native.find_java_method("edu.isi.powerloom.logic.ChameleonNeuralNetwork", "newChameleonNeuralNetwork", new java.lang.Class [] {});
        renamed_Class.classSlotAccessorCode = Native.find_java_method("edu.isi.powerloom.logic.ChameleonNeuralNetwork", "accessChameleonNeuralNetworkSlotValue", new java.lang.Class [] {Native.find_java_class("edu.isi.powerloom.logic.ChameleonNeuralNetwork"), Native.find_java_class("edu.isi.stella.Symbol"), Native.find_java_class("edu.isi.stella.Stella_Object"), java.lang.Boolean.TYPE});
      }
      { Stella_Class renamed_Class = Stella.defineClassFromStringifiedSource("VECTOR-NEURAL-NETWORK", "(DEFCLASS VECTOR-NEURAL-NETWORK (NEURAL-NETWORK) :DOCUMENTATION \"Neural network that supports vector input arguments.\" :SLOTS ((N-VECTOR-ARGUMENTS :TYPE INTEGER :INITIALLY -1) (N-VECTOR-ARGUMENT-SPECS :TYPE INTEGER :INITIALLY -1) (N-VECTOR-ARGUMENT-INPUTS :TYPE INTEGER :INITIALLY -1)))");

        renamed_Class.classConstructorCode = Native.find_java_method("edu.isi.powerloom.logic.VectorNeuralNetwork", "newVectorNeuralNetwork", new java.lang.Class [] {});
        renamed_Class.classSlotAccessorCode = Native.find_java_method("edu.isi.powerloom.logic.VectorNeuralNetwork", "accessVectorNeuralNetworkSlotValue", new java.lang.Class [] {Native.find_java_class("edu.isi.powerloom.logic.VectorNeuralNetwork"), Native.find_java_class("edu.isi.stella.Symbol"), Native.find_java_class("edu.isi.stella.Stella_Object"), java.lang.Boolean.TYPE});
      }
      { Stella_Class renamed_Class = Stella.defineClassFromStringifiedSource("TENSORFLOW-NEURAL-NETWORK", "(DEFCLASS TENSORFLOW-NEURAL-NETWORK (VECTOR-NEURAL-NETWORK) :DOCUMENTATION \"Neural network that is implemented by callbacks to TensorFlow.\" :SLOTS ((PROPOSITION :TYPE PROPOSITION) (MODEL :TYPE PYTHON-OBJECT-POINTER)))");

        renamed_Class.classConstructorCode = Native.find_java_method("edu.isi.powerloom.logic.TensorflowNeuralNetwork", "newTensorflowNeuralNetwork", new java.lang.Class [] {});
        renamed_Class.classSlotAccessorCode = Native.find_java_method("edu.isi.powerloom.logic.TensorflowNeuralNetwork", "accessTensorflowNeuralNetworkSlotValue", new java.lang.Class [] {Native.find_java_class("edu.isi.powerloom.logic.TensorflowNeuralNetwork"), Native.find_java_class("edu.isi.stella.Symbol"), Native.find_java_class("edu.isi.stella.Stella_Object"), java.lang.Boolean.TYPE});
      }
      { Stella_Class renamed_Class = Stella.defineClassFromStringifiedSource("CHAMELEON-BATCH-NEURAL-NETWORK", "(DEFCLASS CHAMELEON-BATCH-NEURAL-NETWORK (CHAMELEON-NEURAL-NETWORK) :DOCUMENTATION \"Chameleon neural network that supports batch operations via emulation.\" :SLOTS ((INPUT-BATCH :TYPE (VECTOR-SEQUENCE OF OBJECT) :DOCUMENTATION \"Each element is a set of values that may be legally passed to `set-input-values'.\") (KEY-BATCH :TYPE (VECTOR-SEQUENCE OF OBJECT) :DOCUMENTATION \"Each element is a key to identify a specific set of input values.\") (TARGET-BATCH :TYPE (VECTOR-SEQUENCE OF FLOAT-WRAPPER) :DOCUMENTATION \"Each element is a target output value for the respective set of input values.\") (OUTPUT-BATCH :TYPE FLOAT-ARRAY) (INPUT-ERROR-BATCH :TYPE (VECTOR-SEQUENCE OF FLOAT-ARRAY) :DOCUMENTATION \"Copies of `input-error' but without the bias unit, thus shifted by 1.\")))");

        renamed_Class.classConstructorCode = Native.find_java_method("edu.isi.powerloom.logic.ChameleonBatchNeuralNetwork", "newChameleonBatchNeuralNetwork", new java.lang.Class [] {});
        renamed_Class.classSlotAccessorCode = Native.find_java_method("edu.isi.powerloom.logic.ChameleonBatchNeuralNetwork", "accessChameleonBatchNeuralNetworkSlotValue", new java.lang.Class [] {Native.find_java_class("edu.isi.powerloom.logic.ChameleonBatchNeuralNetwork"), Native.find_java_class("edu.isi.stella.Symbol"), Native.find_java_class("edu.isi.stella.Stella_Object"), java.lang.Boolean.TYPE});
      }
      { Stella_Class renamed_Class = Stella.defineClassFromStringifiedSource("2D-LONG-ARRAY", "(DEFCLASS 2D-LONG-ARRAY (ABSTRACT-DIMENSIONAL-ARRAY 2-DIMENSIONAL-ARRAY-MIXIN) :DOCUMENTATION \"2-dimensional array with long integer values.\" :PUBLIC? TRUE :PARAMETERS ((ANY-VALUE :TYPE LONG-INTEGER)))");

        renamed_Class.classConstructorCode = Native.find_java_method("edu.isi.powerloom.logic.twoDLongArray", "new2DLongArray", new java.lang.Class [] {java.lang.Integer.TYPE, java.lang.Integer.TYPE});
      }
      { Stella_Class renamed_Class = Stella.defineClassFromStringifiedSource("TENSORFLOW-BATCH-NEURAL-NETWORK", "(DEFCLASS TENSORFLOW-BATCH-NEURAL-NETWORK (TENSORFLOW-NEURAL-NETWORK) :DOCUMENTATION \"Tensorflow neural network that supports batch operations.  We implement input and result\nbatches as 1-D and 2-D float arrays to enable fast back-and-forth copying in a single shot instead of having\nmultiple method calls.  For this reason, we maintain the input and target sequences manually.\" :SLOTS ((INPUT-MODIFIED? :TYPE BOOLEAN :INITIALLY TRUE :DOCUMENTATION \"Cleared by Python/Tensorflow side, used to avoid unnecessary copying.\") (INPUT-BATCH :TYPE 2D-FLOAT-ARRAY :DOCUMENTATION \"Each row is a set of inputs for the input units of the network, including the bias.\") (INPUT-BATCH-LENGTH :TYPE INTEGER :INITIALLY 0) (KEY-BATCH :TYPE (VECTOR-SEQUENCE OF OBJECT) :DOCUMENTATION \"Each element is a key to identify a specific set of input values.\") (VECTOR-BATCH :TYPE 2D-LONG-ARRAY :DOCUMENTATION \"Each row is a set of vector argument specs for the inputs of the network.\") (VECTOR-BATCH-LENGTH :TYPE INTEGER :INITIALLY 0) (TARGET-BATCH :TYPE FLOAT-ARRAY :DOCUMENTATION \"Each element is a target output value for the respective set of input values.\") (TARGET-BATCH-LENGTH :TYPE INTEGER :INITIALLY 0) (OUTPUT-BATCH :TYPE FLOAT-ARRAY) (INPUT-ERROR-BATCH :TYPE 2D-FLOAT-ARRAY :DOCUMENTATION \"Each row is a set of errors the respective inputs including the bias.\")))");

        renamed_Class.classConstructorCode = Native.find_java_method("edu.isi.powerloom.logic.TensorflowBatchNeuralNetwork", "newTensorflowBatchNeuralNetwork", new java.lang.Class [] {});
        renamed_Class.classSlotAccessorCode = Native.find_java_method("edu.isi.powerloom.logic.TensorflowBatchNeuralNetwork", "accessTensorflowBatchNeuralNetworkSlotValue", new java.lang.Class [] {Native.find_java_class("edu.isi.powerloom.logic.TensorflowBatchNeuralNetwork"), Native.find_java_class("edu.isi.stella.Symbol"), Native.find_java_class("edu.isi.stella.Stella_Object"), java.lang.Boolean.TYPE});
      }
      { Stella_Class renamed_Class = Stella.defineClassFromStringifiedSource("NETWORK-PROOF-QUEUE", "(DEFCLASS NETWORK-PROOF-QUEUE (STANDARD-OBJECT) :SLOTS ((DEPENDENTS :TYPE (KEY-VALUE-MAP OF JUSTIFICATION (CONS OF JUSTIFICATION)) :INITIALLY (NEW KEY-VALUE-MAP) :DOCUMENTATION \"Map from computation prerequisites to their dependents.\") (PREREQUISITES :TYPE (KEY-VALUE-MAP OF JUSTIFICATION (CONS OF JUSTIFICATION)) :INITIALLY (NEW KEY-VALUE-MAP) :DOCUMENTATION \"Map from dependents to their computation prerequisites.\") (ACTIVE-NETWORKS :TYPE (HASH-SET OF NEURAL-NETWORK NEURAL-NETWORK) :INITIALLY (NEW HASH-SET)) (MIN-BATCH-SIZE :TYPE INTEGER :INITIALLY (FLOOR (* *NEURAL-NETWORK-BATCH-SIZE* 0.8))) (N-QUEUED :TYPE INTEGER :INITIALLY 0)))");

        renamed_Class.classConstructorCode = Native.find_java_method("edu.isi.powerloom.logic.NetworkProofQueue", "newNetworkProofQueue", new java.lang.Class [] {});
        renamed_Class.classSlotAccessorCode = Native.find_java_method("edu.isi.powerloom.logic.NetworkProofQueue", "accessNetworkProofQueueSlotValue", new java.lang.Class [] {Native.find_java_class("edu.isi.powerloom.logic.NetworkProofQueue"), Native.find_java_class("edu.isi.stella.Symbol"), Native.find_java_class("edu.isi.stella.Stella_Object"), java.lang.Boolean.TYPE});
      }
      { Stella_Class renamed_Class = Stella.defineClassFromStringifiedSource("NETWORK-PROOF-FORWARD-QUEUE", "(DEFCLASS NETWORK-PROOF-FORWARD-QUEUE (NETWORK-PROOF-QUEUE))");

        renamed_Class.classConstructorCode = Native.find_java_method("edu.isi.powerloom.logic.NetworkProofForwardQueue", "newNetworkProofForwardQueue", new java.lang.Class [] {});
      }
      { Stella_Class renamed_Class = Stella.defineClassFromStringifiedSource("NETWORK-PROOF-BACKWARD-QUEUE", "(DEFCLASS NETWORK-PROOF-BACKWARD-QUEUE (NETWORK-PROOF-QUEUE))");

        renamed_Class.classConstructorCode = Native.find_java_method("edu.isi.powerloom.logic.NetworkProofBackwardQueue", "newNetworkProofBackwardQueue", new java.lang.Class [] {});
      }
      { Stella_Class renamed_Class = Stella.defineClassFromStringifiedSource("NETWORK-PROOF-UPDATE-QUEUE", "(DEFCLASS NETWORK-PROOF-UPDATE-QUEUE (NETWORK-PROOF-QUEUE))");

        renamed_Class.classConstructorCode = Native.find_java_method("edu.isi.powerloom.logic.NetworkProofUpdateQueue", "newNetworkProofUpdateQueue", new java.lang.Class [] {});
      }
      { Stella_Class renamed_Class = Stella.defineClassFromStringifiedSource("SCORED-QUERY-PROOF-ADJUNCT", "(DEFCLASS SCORED-QUERY-PROOF-ADJUNCT (PROOF-ADJUNCT) :SLOTS ((PARTIAL-MATCH-STRATEGY :TYPE PARTIAL-MATCH-FRAME) (DOWN-FRAME :TYPE CONTROL-FRAME)))");

        renamed_Class.classConstructorCode = Native.find_java_method("edu.isi.powerloom.logic.ScoredQueryProofAdjunct", "newScoredQueryProofAdjunct", new java.lang.Class [] {});
        renamed_Class.classSlotAccessorCode = Native.find_java_method("edu.isi.powerloom.logic.ScoredQueryProofAdjunct", "accessScoredQueryProofAdjunctSlotValue", new java.lang.Class [] {Native.find_java_class("edu.isi.powerloom.logic.ScoredQueryProofAdjunct"), Native.find_java_class("edu.isi.stella.Symbol"), Native.find_java_class("edu.isi.stella.Stella_Object"), java.lang.Boolean.TYPE});
      }
    }
  }

  static void helpStartupChameleon4() {
    {
      Stella.defineFunctionObject("ENSURE-CHAMELEON-ONTOLOGY", "(DEFUN ENSURE-CHAMELEON-ONTOLOGY () :DOCUMENTATION \"Ensure the chameleon.plm ontology file has been loaded (assumes it exists in the current load path).\" :PUBLIC? TRUE :COMMAND? TRUE)", Native.find_java_method("edu.isi.powerloom.logic.Logic", "ensureChameleonOntology", new java.lang.Class [] {}), null);
      Stella.defineFunctionObject("GET-CHAMELEON-MODULE", "(DEFUN (GET-CHAMELEON-MODULE MODULE) () :DOCUMENTATION \"Return the namespace module for Chameleon relations\" :PUBLIC? TRUE)", Native.find_java_method("edu.isi.powerloom.logic.Logic", "getChameleonModule", new java.lang.Class [] {}), null);
      Stella.defineFunctionObject("CHAMELEON-VECTOR-RELATION?", "(DEFUN (CHAMELEON-VECTOR-RELATION? BOOLEAN) ((X OBJECT)) :DOCUMENTATION \"Return TRUE if `x' is an explicitly marked vector relation.\" :PUBLIC? TRUE :GLOBALLY-INLINE? TRUE (RETURN (TEST-PROPERTY? X /CHAMELEON/@VECTOR-RELATION)))", Native.find_java_method("edu.isi.powerloom.logic.Logic", "chameleonVectorRelationP", new java.lang.Class [] {Native.find_java_class("edu.isi.stella.Stella_Object")}), null);
      Stella.defineFunctionObject("CHAMELEON-IGNORED-VALUE-RELATION?", "(DEFUN (CHAMELEON-IGNORED-VALUE-RELATION? BOOLEAN) ((X OBJECT)) :DOCUMENTATION \"Return TRUE if `x' is an explicitly marked as ignored or a vector relation\nthat is not also marked as a truth value relation.\" :PUBLIC? TRUE :GLOBALLY-INLINE? TRUE (RETURN (OR (TEST-PROPERTY? X /CHAMELEON/@IGNORED-VALUE-RELATION) (AND (TEST-PROPERTY? X /CHAMELEON/@VECTOR-RELATION) (NOT (TEST-PROPERTY? X /CHAMELEON/@TRUTH-VALUE-RELATION))))))", Native.find_java_method("edu.isi.powerloom.logic.Logic", "chameleonIgnoredValueRelationP", new java.lang.Class [] {Native.find_java_class("edu.isi.stella.Stella_Object")}), null);
      Stella.defineFunctionObject("CHAMELEON-TRUTH-VALUE-RELATION?", "(DEFUN (CHAMELEON-TRUTH-VALUE-RELATION? BOOLEAN) ((X OBJECT)) :DOCUMENTATION \"Return TRUE if `x' is an explicitly marked truth value relation or\notherwise not known to be ignored.\" :PUBLIC? TRUE :GLOBALLY-INLINE? TRUE (RETURN (OR (TEST-PROPERTY? X /CHAMELEON/@TRUTH-VALUE-RELATION) (NOT (CHAMELEON-IGNORED-VALUE-RELATION? X)))))", Native.find_java_method("edu.isi.powerloom.logic.Logic", "chameleonTruthValueRelationP", new java.lang.Class [] {Native.find_java_class("edu.isi.stella.Stella_Object")}), null);
      Stella.defineFunctionObject("CHAMELEON-PRIMITIVE-VALUE-RELATION?", "(DEFUN (CHAMELEON-PRIMITIVE-VALUE-RELATION? BOOLEAN) ((X OBJECT)) :DOCUMENTATION \"Return TRUE if `x' is an explicitly marked primitive value relation.\" :PUBLIC? TRUE :GLOBALLY-INLINE? TRUE (RETURN (TEST-PROPERTY? X /CHAMELEON/@PRIMITIVE-VALUE-RELATION)))", Native.find_java_method("edu.isi.powerloom.logic.Logic", "chameleonPrimitiveValueRelationP", new java.lang.Class [] {Native.find_java_class("edu.isi.stella.Stella_Object")}), null);
      Stella.defineFunctionObject("CHAMELEON-PARTIAL-MATCH-MODE?", "(DEFUN (CHAMELEON-PARTIAL-MATCH-MODE? BOOLEAN) () :DOCUMENTATION \"Return TRUE if a query is computing Chameleon partial matches.\" :GLOBALLY-INLINE? TRUE (RETURN (AND (PARTIAL-MATCH-MODE?) (ISA? (PARTIAL-MATCH-STRATEGY *QUERYITERATOR*) @CHAMELEON-PARTIAL-MATCH))))", Native.find_java_method("edu.isi.powerloom.logic.Logic", "chameleonPartialMatchModeP", new java.lang.Class [] {}), null);
      Stella.defineMethodObject("(DEFMETHOD (CREATE-PARTIAL-MATCH-FRAME CHAMELEON-PARTIAL-MATCH) ((SELF CHAMELEON-PARTIAL-MATCH) (FRAME CONTROL-FRAME) (KIND KEYWORD)))", MethodCodeWrapper.wrapMethodCode(Native.find_java_method("edu.isi.powerloom.logic.ChameleonPartialMatch", "createPartialMatchFrame", new java.lang.Class [] {Native.find_java_class("edu.isi.powerloom.logic.ControlFrame"), Native.find_java_class("edu.isi.stella.Keyword")})), null);
      Stella.defineMethodObject("(DEFMETHOD (COMPUTE-DYNAMIC-CUTOFF PARTIAL-MATCH-SCORE) ((SELF CHAMELEON-PARTIAL-MATCH)))", MethodCodeWrapper.wrapMethodCode(Native.find_java_method("edu.isi.powerloom.logic.ChameleonPartialMatch", "computeDynamicCutoff", new java.lang.Class [] {})), null);
      Stella.defineMethodObject("(DEFMETHOD (CUTOFF-PARTIAL-MATCH? BOOLEAN) ((SELF CHAMELEON-PARTIAL-MATCH) (TRACE? BOOLEAN)))", MethodCodeWrapper.wrapMethodCode(Native.find_java_method("edu.isi.powerloom.logic.ChameleonPartialMatch", "cutoffPartialMatchP", new java.lang.Class [] {java.lang.Boolean.TYPE})), null);
      Stella.defineMethodObject("(DEFMETHOD (TRUTH-VALUE-SCORE PARTIAL-MATCH-SCORE) ((SELF CHAMELEON-PARTIAL-MATCH) (TRUTHVALUE TRUTH-VALUE)))", MethodCodeWrapper.wrapMethodCode(Native.find_java_method("edu.isi.powerloom.logic.ChameleonPartialMatch", "truthValueScore", new java.lang.Class [] {Native.find_java_class("edu.isi.powerloom.logic.TruthValue")})), null);
      Stella.defineFunctionObject("INVERT-CHAMELEON-MATCH-SCORE", "(DEFUN (INVERT-CHAMELEON-MATCH-SCORE PARTIAL-MATCH-SCORE) ((SCORE PARTIAL-MATCH-SCORE)))", Native.find_java_method("edu.isi.powerloom.logic.Logic", "invertChameleonMatchScore", new java.lang.Class [] {java.lang.Double.TYPE}), null);
      Stella.defineMethodObject("(DEFMETHOD (INVERT-MATCH-SCORE PARTIAL-MATCH-SCORE) ((SELF CHAMELEON-PARTIAL-MATCH) (SCORE PARTIAL-MATCH-SCORE)))", MethodCodeWrapper.wrapMethodCode(Native.find_java_method("edu.isi.powerloom.logic.ChameleonPartialMatch", "invertMatchScore", new java.lang.Class [] {java.lang.Double.TYPE})), null);
      Stella.defineMethodObject("(DEFMETHOD (PROPOSITION-WEIGHT FLOAT) ((SELF CHAMELEON-PARTIAL-MATCH) (PROPOSITION PROPOSITION)))", MethodCodeWrapper.wrapMethodCode(Native.find_java_method("edu.isi.powerloom.logic.ChameleonPartialMatch", "propositionWeight", new java.lang.Class [] {Native.find_java_class("edu.isi.powerloom.logic.Proposition")})), null);
      Stella.defineMethodObject("(DEFMETHOD PUSH-AND-PARTIAL-MATCH-SCORE ((SELF CHAMELEON-PARTIAL-MATCH) (SCORE PARTIAL-MATCH-SCORE) (WEIGHT FLOAT)))", MethodCodeWrapper.wrapMethodCode(Native.find_java_method("edu.isi.powerloom.logic.ChameleonPartialMatch", "pushAndPartialMatchScore", new java.lang.Class [] {java.lang.Double.TYPE, java.lang.Double.TYPE})), null);
      Stella.defineMethodObject("(DEFMETHOD POP-AND-PARTIAL-MATCH-SCORE ((SELF CHAMELEON-PARTIAL-MATCH)))", MethodCodeWrapper.wrapMethodCode(Native.find_java_method("edu.isi.powerloom.logic.ChameleonPartialMatch", "popAndPartialMatchScore", new java.lang.Class [] {})), null);
      Stella.defineMethodObject("(DEFMETHOD PUSH-OR-PARTIAL-MATCH-SCORE ((SELF CHAMELEON-PARTIAL-MATCH) (SCORE PARTIAL-MATCH-SCORE) (WEIGHT FLOAT)))", MethodCodeWrapper.wrapMethodCode(Native.find_java_method("edu.isi.powerloom.logic.ChameleonPartialMatch", "pushOrPartialMatchScore", new java.lang.Class [] {java.lang.Double.TYPE, java.lang.Double.TYPE})), null);
      Stella.defineMethodObject("(DEFMETHOD POP-OR-PARTIAL-MATCH-SCORE ((SELF CHAMELEON-PARTIAL-MATCH)))", MethodCodeWrapper.wrapMethodCode(Native.find_java_method("edu.isi.powerloom.logic.ChameleonPartialMatch", "popOrPartialMatchScore", new java.lang.Class [] {})), null);
      Stella.defineMethodObject("(DEFMETHOD (ALLOW-UNBOUND-VARIABLES? BOOLEAN) ((SELF CHAMELEON-PARTIAL-MATCH)))", MethodCodeWrapper.wrapMethodCode(Native.find_java_method("edu.isi.powerloom.logic.ChameleonPartialMatch", "allowUnboundVariablesP", new java.lang.Class [] {})), null);
      Stella.defineMethodObject("(DEFMETHOD (COMPUTE-AND-SCORE PARTIAL-MATCH-SCORE) ((SELF CHAMELEON-PARTIAL-MATCH)))", MethodCodeWrapper.wrapMethodCode(Native.find_java_method("edu.isi.powerloom.logic.ChameleonPartialMatch", "computeAndScore", new java.lang.Class [] {})), null);
      Stella.defineMethodObject("(DEFMETHOD (CONTINUE-PARTIAL-AND-PROOF KEYWORD) ((SELF CHAMELEON-PARTIAL-MATCH) (FRAME CONTROL-FRAME) (LASTMOVE KEYWORD)))", MethodCodeWrapper.wrapMethodCode(Native.find_java_method("edu.isi.powerloom.logic.ChameleonPartialMatch", "continuePartialAndProof", new java.lang.Class [] {Native.find_java_class("edu.isi.powerloom.logic.ControlFrame"), Native.find_java_class("edu.isi.stella.Keyword")})), null);
      Stella.defineMethodObject("(DEFMETHOD (COMPUTE-OR-SCORE PARTIAL-MATCH-SCORE) ((SELF CHAMELEON-PARTIAL-MATCH)))", MethodCodeWrapper.wrapMethodCode(Native.find_java_method("edu.isi.powerloom.logic.ChameleonPartialMatch", "computeOrScore", new java.lang.Class [] {})), null);
      Stella.defineMethodObject("(DEFMETHOD (CONTINUE-PARTIAL-OR-PROOF KEYWORD) ((SELF CHAMELEON-PARTIAL-MATCH) (LASTMOVE KEYWORD)))", MethodCodeWrapper.wrapMethodCode(Native.find_java_method("edu.isi.powerloom.logic.ChameleonPartialMatch", "continuePartialOrProof", new java.lang.Class [] {Native.find_java_class("edu.isi.stella.Keyword")})), null);
      Stella.defineMethodObject("(DEFMETHOD (COMPUTE-NOT-SCORE PARTIAL-MATCH-SCORE) ((SELF CHAMELEON-PARTIAL-MATCH)))", MethodCodeWrapper.wrapMethodCode(Native.find_java_method("edu.isi.powerloom.logic.ChameleonPartialMatch", "computeNotScore", new java.lang.Class [] {})), null);
      Stella.defineMethodObject("(DEFMETHOD (CONTINUE-PARTIAL-NOT-PROOF KEYWORD) ((SELF CHAMELEON-PARTIAL-MATCH) (LASTMOVE KEYWORD)))", MethodCodeWrapper.wrapMethodCode(Native.find_java_method("edu.isi.powerloom.logic.ChameleonPartialMatch", "continuePartialNotProof", new java.lang.Class [] {Native.find_java_class("edu.isi.stella.Keyword")})), null);
      Stella.defineMethodObject("(DEFMETHOD (CONTINUE-PARTIAL-FAIL-PROOF KEYWORD) ((SELF CHAMELEON-PARTIAL-MATCH) (LASTMOVE KEYWORD)))", MethodCodeWrapper.wrapMethodCode(Native.find_java_method("edu.isi.powerloom.logic.ChameleonPartialMatch", "continuePartialFailProof", new java.lang.Class [] {Native.find_java_class("edu.isi.stella.Keyword")})), null);
      Stella.defineMethodObject("(DEFMETHOD (COMPUTE-GOAL-SCORE PARTIAL-MATCH-SCORE) ((SELF CHAMELEON-PARTIAL-MATCH)))", MethodCodeWrapper.wrapMethodCode(Native.find_java_method("edu.isi.powerloom.logic.ChameleonPartialMatch", "computeGoalScore", new java.lang.Class [] {})), null);
      Stella.defineMethodObject("(DEFMETHOD (CONTINUE-PARTIAL-STRATEGIES-PROOFS KEYWORD) ((SELF CHAMELEON-PARTIAL-MATCH) (LASTMOVE KEYWORD)))", MethodCodeWrapper.wrapMethodCode(Native.find_java_method("edu.isi.powerloom.logic.ChameleonPartialMatch", "continuePartialStrategiesProofs", new java.lang.Class [] {Native.find_java_class("edu.isi.stella.Keyword")})), null);
      Stella.defineMethodObject("(DEFMETHOD (CONTINUE-PARTIAL-ANTECEDENTS-PROOF KEYWORD) ((SELF CHAMELEON-PARTIAL-MATCH) (LASTMOVE KEYWORD)))", MethodCodeWrapper.wrapMethodCode(Native.find_java_method("edu.isi.powerloom.logic.ChameleonPartialMatch", "continuePartialAntecedentsProof", new java.lang.Class [] {Native.find_java_class("edu.isi.stella.Keyword")})), null);
      Stella.defineMethodObject("(DEFMETHOD (COMPUTE-PARTIAL-TRUTH FLOAT) ((SELF CHAMELEON-PARTIAL-MATCH) (QUERY QUERY-ITERATOR)))", MethodCodeWrapper.wrapMethodCode(Native.find_java_method("edu.isi.powerloom.logic.ChameleonPartialMatch", "computePartialTruth", new java.lang.Class [] {Native.find_java_class("edu.isi.powerloom.logic.QueryIterator")})), null);
      Stella.defineFunctionObject("REGISTER-NEURAL-NETWORK", "(DEFUN REGISTER-NEURAL-NETWORK ((SELF NEURAL-NETWORK)) :DOCUMENTATION \"Register the network `self' on the global networks list (assumes `self' has been linked).\" :PUBLIC? TRUE)", Native.find_java_method("edu.isi.powerloom.logic.NeuralNetwork", "registerNeuralNetwork", new java.lang.Class [] {Native.find_java_class("edu.isi.powerloom.logic.NeuralNetwork")}), null);
      Stella.defineFunctionObject("UNREGISTER-NEURAL-NETWORK", "(DEFUN UNREGISTER-NEURAL-NETWORK ((SELF NEURAL-NETWORK)) :DOCUMENTATION \"Unregister the network `self' on the global networks list.\" :PUBLIC? TRUE)", Native.find_java_method("edu.isi.powerloom.logic.NeuralNetwork", "unregisterNeuralNetwork", new java.lang.Class [] {Native.find_java_class("edu.isi.powerloom.logic.NeuralNetwork")}), null);
      Stella.defineFunctionObject("LOOKUP-PROPOSITION-NEURAL-NETWORK", "(DEFUN (LOOKUP-PROPOSITION-NEURAL-NETWORK NEURAL-NETWORK) ((PROP PROPOSITION)) :DOCUMENTATION \"Lookup the neural network for `prop' in the global networks list.\" :PUBLIC? TRUE)", Native.find_java_method("edu.isi.powerloom.logic.Proposition", "lookupPropositionNeuralNetwork", new java.lang.Class [] {Native.find_java_class("edu.isi.powerloom.logic.Proposition")}), null);
      Stella.defineFunctionObject("DELETE-NEURAL-NETWORKS", "(DEFUN DELETE-NEURAL-NETWORKS () :DOCUMENTATION \"Eliminate all neural networks and remove any connections\nto propositions and training examples.\" :COMMAND? TRUE :PUBLIC? TRUE)", Native.find_java_method("edu.isi.powerloom.logic.Logic", "deleteNeuralNetworks", new java.lang.Class [] {}), null);
      Stella.defineFunctionObject("RANDOMIZE-NEURAL-NETWORKS", "(DEFUN RANDOMIZE-NEURAL-NETWORKS () :DOCUMENTATION \"Undo all training and randomize weights in all neural networks.\" :COMMAND? TRUE :PUBLIC? TRUE)", Native.find_java_method("edu.isi.powerloom.logic.Logic", "randomizeNeuralNetworks", new java.lang.Class [] {}), null);
      Stella.defineFunctionObject("CREATE-AND-LINK-NEURAL-NETWORK", "(DEFUN CREATE-AND-LINK-NEURAL-NETWORK ((PROP PROPOSITION)))", Native.find_java_method("edu.isi.powerloom.logic.Proposition", "createAndLinkNeuralNetwork", new java.lang.Class [] {Native.find_java_class("edu.isi.powerloom.logic.Proposition")}), null);
      Stella.defineFunctionObject("GET-PROPOSITION-NEURAL-NETWORK", "(DEFUN (GET-PROPOSITION-NEURAL-NETWORK NEURAL-NETWORK) ((PROP PROPOSITION) (ERROR? BOOLEAN)) :DOCUMENTATION \"Return the neural network associated with `prop'.  If `error?', raise an\nexception if it cannot be found, otherwise, simply return NULL.\" :PUBLIC? TRUE)", Native.find_java_method("edu.isi.powerloom.logic.Proposition", "getPropositionNeuralNetwork", new java.lang.Class [] {Native.find_java_class("edu.isi.powerloom.logic.Proposition"), java.lang.Boolean.TYPE}), null);
      Stella.defineFunctionObject("GET-JUSTIFICATION-NEURAL-NETWORK", "(DEFUN (GET-JUSTIFICATION-NEURAL-NETWORK NEURAL-NETWORK) ((JUST JUSTIFICATION)) :DOCUMENTATION \"Return the neural network associated with an :AND or :OR justification.\nRaise an error if the associated proposition is not linked to a neural network.\")", Native.find_java_method("edu.isi.powerloom.logic.Justification", "getJustificationNeuralNetwork", new java.lang.Class [] {Native.find_java_class("edu.isi.powerloom.logic.Justification")}), null);
      Stella.defineMethodObject("(DEFMETHOD LINK-NEURAL-NETWORK ((SELF NEURAL-NETWORK) (PROP PROPOSITION)) :DOCUMENTATION \"Link the network `self' to its associated proposition `prop'.\" :PUBLIC? TRUE)", MethodCodeWrapper.wrapMethodCode(Native.find_java_method("edu.isi.powerloom.logic.NeuralNetwork", "linkNeuralNetwork", new java.lang.Class [] {Native.find_java_class("edu.isi.powerloom.logic.Proposition")})), null);
      Stella.defineMethodObject("(DEFMETHOD UNLINK-NEURAL-NETWORK ((SELF NEURAL-NETWORK)) :DOCUMENTATION \"Unlink the network `self' from its associated proposition.\" :PUBLIC? TRUE)", MethodCodeWrapper.wrapMethodCode(Native.find_java_method("edu.isi.powerloom.logic.NeuralNetwork", "unlinkNeuralNetwork", new java.lang.Class [] {})), null);
      Stella.defineMethodObject("(DEFMETHOD (GET-NEURAL-NETWORK-PROPOSITION PROPOSITION) ((SELF NEURAL-NETWORK)) :DOCUMENTATION \"Return the proposition linked to `self'.\" :PUBLIC? TRUE)", MethodCodeWrapper.wrapMethodCode(Native.find_java_method("edu.isi.powerloom.logic.NeuralNetwork", "getNeuralNetworkProposition", new java.lang.Class [] {})), null);
      Stella.defineMethodObject("(DEFMETHOD DELETE-NEURAL-NETWORK ((SELF NEURAL-NETWORK)) :DOCUMENTATION \"Unlink the network `self' from its associated proposition and mark it as deleted.\" :PUBLIC? TRUE)", MethodCodeWrapper.wrapMethodCode(Native.find_java_method("edu.isi.powerloom.logic.NeuralNetwork", "deleteNeuralNetwork", new java.lang.Class [] {})), null);
      Stella.defineMethodObject("(DEFMETHOD (DELETED? BOOLEAN) ((SELF NEURAL-NETWORK)) :DOCUMENTATION \"Return trun if `self' has been deleted.\" :PUBLIC? TRUE)", MethodCodeWrapper.wrapMethodCode(Native.find_java_method("edu.isi.powerloom.logic.NeuralNetwork", "deletedP", new java.lang.Class [] {})), null);
      Stella.defineMethodObject("(DEFMETHOD ALLOCATE-NETWORK-ARRAYS ((SELF NEURAL-NETWORK) (NUM-IN INTEGER) (NUM-HIDDEN INTEGER) (NUM-OUT INTEGER)) :DOCUMENTATION \"Allocates array space for a neural network with given number of input, hidden and output units.\" :PUBLIC? TRUE)", MethodCodeWrapper.wrapMethodCode(Native.find_java_method("edu.isi.powerloom.logic.NeuralNetwork", "allocateNetworkArrays", new java.lang.Class [] {java.lang.Integer.TYPE, java.lang.Integer.TYPE, java.lang.Integer.TYPE})), null);
      Stella.defineMethodObject("(DEFMETHOD RANDOMIZE-NETWORK-WEIGHTS ((SELF NEURAL-NETWORK)) :DOCUMENTATION \"Randomize the weights of the neural network `self'.\" :PUBLIC? TRUE)", MethodCodeWrapper.wrapMethodCode(Native.find_java_method("edu.isi.powerloom.logic.NeuralNetwork", "randomizeNetworkWeights", new java.lang.Class [] {})), null);
      Stella.defineMethodObject("(DEFMETHOD BUILD-PROPOSITION-NETWORK ((SELF NEURAL-NETWORK) (PROP PROPOSITION)) :DOCUMENTATION \"Build a neural network for the proposition `prop' and link them.  This builds\na two-layer perceptron network whose input nodes are activated by the truth of `prop's arguments\nand whose output node computes the truth of `prop'.\" :PUBLIC? TRUE)", MethodCodeWrapper.wrapMethodCode(Native.find_java_method("edu.isi.powerloom.logic.NeuralNetwork", "buildPropositionNetwork", new java.lang.Class [] {Native.find_java_class("edu.isi.powerloom.logic.Proposition")})), null);
      Stella.defineMethodObject("(DEFMETHOD (NUMBER-OF-INPUTS INTEGER) ((SELF NEURAL-NETWORK)) :DOCUMENTATION \"Return the number of input values expected by `self' (ignores bias unit).\" :PUBLIC? TRUE)", MethodCodeWrapper.wrapMethodCode(Native.find_java_method("edu.isi.powerloom.logic.NeuralNetwork", "numberOfInputs", new java.lang.Class [] {})), null);
      Stella.defineFunctionObject("HELP-COMPUTE-ARGUMENT-INDEX", "(DEFUN (HELP-COMPUTE-ARGUMENT-INDEX INTEGER) ((SELF NEURAL-NETWORK) (ARG PROPOSITION) (KIND KEYWORD)) :DOCUMENTATION \"Memoizable helper function for `truth-value-argument-index' and friends.\" :PUBLIC? TRUE)", Native.find_java_method("edu.isi.powerloom.logic.NeuralNetwork", "helpComputeArgumentIndex", new java.lang.Class [] {Native.find_java_class("edu.isi.powerloom.logic.NeuralNetwork"), Native.find_java_class("edu.isi.powerloom.logic.Proposition"), Native.find_java_class("edu.isi.stella.Keyword")}), null);
      Stella.defineMethodObject("(DEFMETHOD (TRUTH-VALUE-ARGUMENT? BOOLEAN) ((SELF NEURAL-NETWORK) (ARG PROPOSITION)) :DOCUMENTATION \"Return TRUE if the partial truth value of `arg' will be considered for `self's inputs.\nThis top-level method only looks at `arg' and ignores `self'.\" :PUBLIC? TRUE)", MethodCodeWrapper.wrapMethodCode(Native.find_java_method("edu.isi.powerloom.logic.NeuralNetwork", "truthValueArgumentP", new java.lang.Class [] {Native.find_java_class("edu.isi.powerloom.logic.Proposition")})), null);
      Stella.defineMethodObject("(DEFMETHOD (NUMBER-OF-TRUTH-VALUE-ARGUMENTS INTEGER) ((SELF NEURAL-NETWORK) (PROP PROPOSITION)) :DOCUMENTATION \"Return the number of arguments of `prop' whose partial truth value will be considered\nfor `self's inputs.  This top-level method only looks at `prop' and ignores `self'.\" :PUBLIC? TRUE)", MethodCodeWrapper.wrapMethodCode(Native.find_java_method("edu.isi.powerloom.logic.NeuralNetwork", "numberOfTruthValueArguments", new java.lang.Class [] {Native.find_java_class("edu.isi.powerloom.logic.Proposition")})), null);
      Stella.defineMethodObject("(DEFMETHOD (TRUTH-VALUE-ARGUMENT-INDEX INTEGER) ((SELF NEURAL-NETWORK) (ARG PROPOSITION)) :DOCUMENTATION \"Return the 0-based input position of truth value argument `arg'.  Ignores bias unit which\nis a network-implementation-specific detail.  Generates indices in the order expected by `set-input-values'.\nIf `arg' is not a truth value argument, returns -1.\" :PUBLIC? TRUE)", MethodCodeWrapper.wrapMethodCode(Native.find_java_method("edu.isi.powerloom.logic.NeuralNetwork", "truthValueArgumentIndex", new java.lang.Class [] {Native.find_java_class("edu.isi.powerloom.logic.Proposition")})), null);
      Stella.defineMethodObject("(DEFMETHOD (IGNORED-VALUE-ARGUMENT? BOOLEAN) ((SELF NEURAL-NETWORK) (ARG PROPOSITION)) :DOCUMENTATION \"Return TRUE if the partial truth value of `arg' will be ignored for `self's inputs.\nThis top-level method only looks at `arg' and ignores `self'.\" :PUBLIC? TRUE)", MethodCodeWrapper.wrapMethodCode(Native.find_java_method("edu.isi.powerloom.logic.NeuralNetwork", "ignoredValueArgumentP", new java.lang.Class [] {Native.find_java_class("edu.isi.powerloom.logic.Proposition")})), null);
      Stella.defineMethodObject("(DEFMETHOD (NUMBER-OF-IGNORED-VALUE-ARGUMENTS INTEGER) ((SELF NEURAL-NETWORK) (PROP PROPOSITION)) :DOCUMENTATION \"Return the number of arguments of `prop' whose partial truth value will be ignored\nfor `self's inputs.  This top-level method only looks at `prop' and ignores `self'.\" :PUBLIC? TRUE)", MethodCodeWrapper.wrapMethodCode(Native.find_java_method("edu.isi.powerloom.logic.NeuralNetwork", "numberOfIgnoredValueArguments", new java.lang.Class [] {Native.find_java_class("edu.isi.powerloom.logic.Proposition")})), null);
      Stella.defineMethodObject("(DEFMETHOD (VECTOR-ARGUMENT? BOOLEAN) ((SELF NEURAL-NETWORK) (ARG PROPOSITION)) :DOCUMENTATION \"Return TRUE if `arg' yields one or more vectors for `self's inputs.\" :PUBLIC? TRUE)", MethodCodeWrapper.wrapMethodCode(Native.find_java_method("edu.isi.powerloom.logic.NeuralNetwork", "vectorArgumentP", new java.lang.Class [] {Native.find_java_class("edu.isi.powerloom.logic.Proposition")})), null);
      Stella.defineMethodObject("(DEFMETHOD (HAS-VECTOR-ARGUMENTS? BOOLEAN) ((SELF NEURAL-NETWORK)) :DOCUMENTATION \"Return TRUE if `self' has at least one vector input argument.\" :PUBLIC? TRUE)", MethodCodeWrapper.wrapMethodCode(Native.find_java_method("edu.isi.powerloom.logic.NeuralNetwork", "hasVectorArgumentsP", new java.lang.Class [] {})), null);
      Stella.defineMethodObject("(DEFMETHOD (NUMBER-OF-VECTOR-ARGUMENTS INTEGER) ((SELF NEURAL-NETWORK) (PROP PROPOSITION)) :DOCUMENTATION \"Return the number of arguments of `prop' that yield one or more vectors\nfor `self's inputs.  `prop' can be NULL in which case the linked proposition will be used.\" :PUBLIC? TRUE)", MethodCodeWrapper.wrapMethodCode(Native.find_java_method("edu.isi.powerloom.logic.NeuralNetwork", "numberOfVectorArguments", new java.lang.Class [] {Native.find_java_class("edu.isi.powerloom.logic.Proposition")})), null);
      Stella.defineMethodObject("(DEFMETHOD (VECTOR-ARGUMENT-INDEX INTEGER) ((SELF NEURAL-NETWORK) (ARG PROPOSITION)) :DOCUMENTATION \"Return the 0-based input position of vector argument `arg'.  Ignores bias unit which\nis a network-implementation-specific detail.  If `arg' is not a vector argument, returns -1.\" :PUBLIC? TRUE)", MethodCodeWrapper.wrapMethodCode(Native.find_java_method("edu.isi.powerloom.logic.NeuralNetwork", "vectorArgumentIndex", new java.lang.Class [] {Native.find_java_class("edu.isi.powerloom.logic.Proposition")})), null);
      Stella.defineMethodObject("(DEFMETHOD (NTH-INPUT FLOAT) ((SELF NEURAL-NETWORK) (N INTEGER)) :DOCUMENTATION \"Return the 0-based `n'-th proposition input of `self' (ignores bias unit).\" :PUBLIC? TRUE)", MethodCodeWrapper.wrapMethodCode(Native.find_java_method("edu.isi.powerloom.logic.NeuralNetwork", "nthInput", new java.lang.Class [] {java.lang.Integer.TYPE})), null);
      Stella.defineMethodObject("(DEFMETHOD (NTH-INPUT-ERROR FLOAT) ((SELF NEURAL-NETWORK) (N INTEGER)) :DOCUMENTATION \"Return the 0-based `n'-th proposition input error of `self' (ignores bias unit).\" :PUBLIC? TRUE)", MethodCodeWrapper.wrapMethodCode(Native.find_java_method("edu.isi.powerloom.logic.NeuralNetwork", "nthInputError", new java.lang.Class [] {java.lang.Integer.TYPE})), null);
      Stella.defineMethodObject("(DEFMETHOD SET-INPUT-VALUES ((SELF NEURAL-NETWORK) (VALUES OBJECT)) :DOCUMENTATION \"Set the current truth-value inputs of the network `self' to float `values' in sequence.\nMissing inputs will be set to 0.0, extra values will be ignored.\" :PUBLIC? TRUE)", MethodCodeWrapper.wrapMethodCode(Native.find_java_method("edu.isi.powerloom.logic.NeuralNetwork", "setInputValues", new java.lang.Class [] {Native.find_java_class("edu.isi.stella.Stella_Object")})), null);
    }
  }

  static void helpStartupChameleon5() {
    {
      Stella.defineMethodObject("(DEFMETHOD SET-VECTOR-INPUT-VALUES ((SELF NEURAL-NETWORK) (VECTORSPECS OBJECT)) :DOCUMENTATION \"Set the current vector inputs of the network `self' to the vectors described by `vectorSpecs'.\nEach vector spec describes a vector-generating proposition that produces one or more vectors.  How those specs\nare translated into actual numeric vectors such as embeddings is specific to the particular neural network type.\" :PUBLIC? TRUE)", MethodCodeWrapper.wrapMethodCode(Native.find_java_method("edu.isi.powerloom.logic.NeuralNetwork", "setVectorInputValues", new java.lang.Class [] {Native.find_java_class("edu.isi.stella.Stella_Object")})), null);
      Stella.defineMethodObject("(DEFMETHOD (GET-VECTOR-ARGUMENT-SPEC OBJECT) ((SELF NEURAL-NETWORK) (ARG OBJECT)) :DOCUMENTATION \"Generate a single argument spec for `arg' that can be used for `set-vector-input-values'.\n`arg' can either be a proposition or justification.\" :PUBLIC? TRUE)", MethodCodeWrapper.wrapMethodCode(Native.find_java_method("edu.isi.powerloom.logic.NeuralNetwork", "getVectorArgumentSpec", new java.lang.Class [] {Native.find_java_class("edu.isi.stella.Stella_Object")})), null);
      Stella.defineMethodObject("(DEFMETHOD (FORWARD-PROPAGATE-INPUTS FLOAT) ((SELF NEURAL-NETWORK)) :DOCUMENTATION \"Activates the current inputs of the network `self' to compute its output.\nSets `self's `output' slot and returns the computed value.  Reads input activations and\nweights and updates hidden and output activations.\" :PUBLIC? TRUE)", MethodCodeWrapper.wrapMethodCode(Native.find_java_method("edu.isi.powerloom.logic.NeuralNetwork", "forwardPropagateInputs", new java.lang.Class [] {})), null);
      Stella.defineMethodObject("(DEFMETHOD BACKWARD-PROPAGATE-ERROR ((SELF NEURAL-NETWORK) (ERROR FLOAT)) :DOCUMENTATION \"Given a properly forward activated network `self' for the current set of inputs,\nand a training `error' between the current output and the goal value, backpropagate the error and\nupdate `self's vector of input errors.  Reads output, hidden activations and weights and updates\nhidden errors and input errors.\" :PUBLIC? TRUE)", MethodCodeWrapper.wrapMethodCode(Native.find_java_method("edu.isi.powerloom.logic.NeuralNetwork", "backwardPropagateError", new java.lang.Class [] {java.lang.Double.TYPE})), null);
      Stella.defineMethodObject("(DEFMETHOD UPDATE-NETWORK-WEIGHTS ((SELF NEURAL-NETWORK) (ERROR FLOAT)) :DOCUMENTATION \"Given a properly forward activated and backpropagated network `self' for the current\ninputs and training `error', update the network's weights according to current gradients, learning rate\nand momentum terms to reduce the error for the given inputs.  Reads output, hidden and input activations,\nhidden error, weights and weight deltas, and updates weights and weight deltas.\" :PUBLIC? TRUE)", MethodCodeWrapper.wrapMethodCode(Native.find_java_method("edu.isi.powerloom.logic.NeuralNetwork", "updateNetworkWeights", new java.lang.Class [] {java.lang.Double.TYPE})), null);
      Stella.defineMethodObject("(DEFMETHOD LINK-NEURAL-NETWORK ((SELF PROPOSITION-NEURAL-NETWORK) (PROP PROPOSITION)) :DOCUMENTATION \"Link the network `self' to its associated proposition `prop'.\" :PUBLIC? TRUE)", MethodCodeWrapper.wrapMethodCode(Native.find_java_method("edu.isi.powerloom.logic.PropositionNeuralNetwork", "linkNeuralNetwork", new java.lang.Class [] {Native.find_java_class("edu.isi.powerloom.logic.Proposition")})), null);
      Stella.defineMethodObject("(DEFMETHOD UNLINK-NEURAL-NETWORK ((SELF PROPOSITION-NEURAL-NETWORK)) :DOCUMENTATION \"Unlink the network `self' from its associated proposition.\" :PUBLIC? TRUE)", MethodCodeWrapper.wrapMethodCode(Native.find_java_method("edu.isi.powerloom.logic.PropositionNeuralNetwork", "unlinkNeuralNetwork", new java.lang.Class [] {})), null);
      Stella.defineMethodObject("(DEFMETHOD (GET-NEURAL-NETWORK-PROPOSITION PROPOSITION) ((SELF PROPOSITION-NEURAL-NETWORK)) :DOCUMENTATION \"Return the proposition linked to `self'.\" :PUBLIC? TRUE)", MethodCodeWrapper.wrapMethodCode(Native.find_java_method("edu.isi.powerloom.logic.PropositionNeuralNetwork", "getNeuralNetworkProposition", new java.lang.Class [] {})), null);
      Stella.defineMethodObject("(DEFMETHOD DELETE-NEURAL-NETWORK ((SELF PROPOSITION-NEURAL-NETWORK)) :DOCUMENTATION \"Unlink the network `self' from its associated proposition and mark it as deleted.\" :PUBLIC? TRUE)", MethodCodeWrapper.wrapMethodCode(Native.find_java_method("edu.isi.powerloom.logic.PropositionNeuralNetwork", "deleteNeuralNetwork", new java.lang.Class [] {})), null);
      Stella.defineMethodObject("(DEFMETHOD (DELETED? BOOLEAN) ((SELF PROPOSITION-NEURAL-NETWORK)) :DOCUMENTATION \"Return trun if `self' has been deleted.\" :PUBLIC? TRUE)", MethodCodeWrapper.wrapMethodCode(Native.find_java_method("edu.isi.powerloom.logic.PropositionNeuralNetwork", "deletedP", new java.lang.Class [] {})), null);
      Stella.defineMethodObject("(DEFMETHOD ALLOCATE-NETWORK-ARRAYS ((SELF PROPOSITION-NEURAL-NETWORK) (NUM-IN INTEGER) (NUM-HIDDEN INTEGER) (NUM-OUT INTEGER)) :DOCUMENTATION \"Allocates array space for a neural network with given number of input, hidden and output units.\" :PUBLIC? TRUE)", MethodCodeWrapper.wrapMethodCode(Native.find_java_method("edu.isi.powerloom.logic.PropositionNeuralNetwork", "allocateNetworkArrays", new java.lang.Class [] {java.lang.Integer.TYPE, java.lang.Integer.TYPE, java.lang.Integer.TYPE})), null);
      Stella.defineMethodObject("(DEFMETHOD RANDOMIZE-NETWORK-WEIGHTS ((SELF PROPOSITION-NEURAL-NETWORK)) :DOCUMENTATION \"Randomize the weights of the neural network `self'.\" :PUBLIC? TRUE)", MethodCodeWrapper.wrapMethodCode(Native.find_java_method("edu.isi.powerloom.logic.PropositionNeuralNetwork", "randomizeNetworkWeights", new java.lang.Class [] {})), null);
      Stella.defineMethodObject("(DEFMETHOD BUILD-PROPOSITION-NETWORK ((SELF PROPOSITION-NEURAL-NETWORK) (PROP PROPOSITION)) :DOCUMENTATION \"Build a neural network for the proposition `prop'.  This builds a two-layer\nperceptron network whose input nodes are activated by the truth of `prop's arguments and whose\noutput node computes the truth of `prop'.\" :PUBLIC? TRUE)", MethodCodeWrapper.wrapMethodCode(Native.find_java_method("edu.isi.powerloom.logic.PropositionNeuralNetwork", "buildPropositionNetwork", new java.lang.Class [] {Native.find_java_class("edu.isi.powerloom.logic.Proposition")})), null);
      Stella.defineMethodObject("(DEFMETHOD (NUMBER-OF-INPUTS INTEGER) ((SELF PROPOSITION-NEURAL-NETWORK)) :DOCUMENTATION \"Return the number of input values expected by `self' (ignores bias unit).\" :PUBLIC? TRUE)", MethodCodeWrapper.wrapMethodCode(Native.find_java_method("edu.isi.powerloom.logic.PropositionNeuralNetwork", "numberOfInputs", new java.lang.Class [] {})), null);
      Stella.defineMethodObject("(DEFMETHOD (NTH-INPUT FLOAT) ((SELF PROPOSITION-NEURAL-NETWORK) (N INTEGER)) :DOCUMENTATION \"Return the 0-based `n'-th proposition input of `self' (ignores bias unit).\" :PUBLIC? TRUE :GLOBALLY-INLINE? TRUE (RETURN (NTH (INPUT SELF) (1+ N))))", MethodCodeWrapper.wrapMethodCode(Native.find_java_method("edu.isi.powerloom.logic.PropositionNeuralNetwork", "nthInput", new java.lang.Class [] {java.lang.Integer.TYPE})), null);
      Stella.defineMethodObject("(DEFMETHOD (NTH-INPUT-ERROR FLOAT) ((SELF PROPOSITION-NEURAL-NETWORK) (N INTEGER)) :DOCUMENTATION \"Return the 0-based `n'-th proposition input error of `self' (ignores bias unit).\" :PUBLIC? TRUE :GLOBALLY-INLINE? TRUE (RETURN (NTH (INPUT-ERROR SELF) (1+ N))))", MethodCodeWrapper.wrapMethodCode(Native.find_java_method("edu.isi.powerloom.logic.PropositionNeuralNetwork", "nthInputError", new java.lang.Class [] {java.lang.Integer.TYPE})), null);
      Stella.defineMethodObject("(DEFMETHOD SET-INPUT-VALUES ((SELF PROPOSITION-NEURAL-NETWORK) (VALUES OBJECT)) :DOCUMENTATION \"Set the current truth-value inputs of the network `self' to float `values' in sequence.\nMissing inputs will be set to 0.0, extra values will be ignored.\" :PUBLIC? TRUE)", MethodCodeWrapper.wrapMethodCode(Native.find_java_method("edu.isi.powerloom.logic.PropositionNeuralNetwork", "setInputValues", new java.lang.Class [] {Native.find_java_class("edu.isi.stella.Stella_Object")})), null);
      Stella.defineMethodObject("(DEFMETHOD (FORWARD-PROPAGATE-INPUTS FLOAT) ((SELF PROPOSITION-NEURAL-NETWORK)) :DOCUMENTATION \"Activates the current inputs of the network `self' to compute its output.\nSets `self's `output' slot and returns the computed value.  Reads input activations and\nweights and updates hidden and output activations.\" :PUBLIC? TRUE)", MethodCodeWrapper.wrapMethodCode(Native.find_java_method("edu.isi.powerloom.logic.PropositionNeuralNetwork", "forwardPropagateInputs", new java.lang.Class [] {})), null);
      Stella.defineMethodObject("(DEFMETHOD BACKWARD-PROPAGATE-ERROR ((SELF PROPOSITION-NEURAL-NETWORK) (ERROR FLOAT)) :DOCUMENTATION \"Given a properly forward activated network `self' for the current set of inputs,\nand a training `error' between the current output and the goal value, backpropagate the error and\nupdate `self's vector of input errors.  Reads output, hidden activations and weights and updates\nhidden errors and input errors.\" :PUBLIC? TRUE)", MethodCodeWrapper.wrapMethodCode(Native.find_java_method("edu.isi.powerloom.logic.PropositionNeuralNetwork", "backwardPropagateError", new java.lang.Class [] {java.lang.Double.TYPE})), null);
      Stella.defineMethodObject("(DEFMETHOD UPDATE-NETWORK-WEIGHTS ((SELF PROPOSITION-NEURAL-NETWORK) (ERROR FLOAT)) :DOCUMENTATION \"Given a properly forward activated and backpropagated network `self' for the current\ninputs and training `error', update the network's weights according to current gradients, learning rate\nand momentum terms to reduce the error for the given inputs.  Reads output, hidden and input activations,\nhidden error, weights and weight deltas, and updates weights and weight deltas.\" :PUBLIC? TRUE)", MethodCodeWrapper.wrapMethodCode(Native.find_java_method("edu.isi.powerloom.logic.PropositionNeuralNetwork", "updateNetworkWeights", new java.lang.Class [] {java.lang.Double.TYPE})), null);
      Stella.defineMethodObject("(DEFMETHOD LINK-NEURAL-NETWORK ((SELF CHAMELEON-NEURAL-NETWORK) (PROP PROPOSITION)) :DOCUMENTATION \"Link the network `self' to its associated proposition `prop'.\" :PUBLIC? TRUE)", MethodCodeWrapper.wrapMethodCode(Native.find_java_method("edu.isi.powerloom.logic.ChameleonNeuralNetwork", "linkNeuralNetwork", new java.lang.Class [] {Native.find_java_class("edu.isi.powerloom.logic.Proposition")})), null);
      Stella.defineMethodObject("(DEFMETHOD UNLINK-NEURAL-NETWORK ((SELF CHAMELEON-NEURAL-NETWORK)) :DOCUMENTATION \"Unlink the network `self' from its associated proposition.\" :PUBLIC? TRUE)", MethodCodeWrapper.wrapMethodCode(Native.find_java_method("edu.isi.powerloom.logic.ChameleonNeuralNetwork", "unlinkNeuralNetwork", new java.lang.Class [] {})), null);
      Stella.defineMethodObject("(DEFMETHOD (GET-NEURAL-NETWORK-PROPOSITION PROPOSITION) ((SELF CHAMELEON-NEURAL-NETWORK)) :DOCUMENTATION \"Return the proposition linked to `self'.\" :PUBLIC? TRUE)", MethodCodeWrapper.wrapMethodCode(Native.find_java_method("edu.isi.powerloom.logic.ChameleonNeuralNetwork", "getNeuralNetworkProposition", new java.lang.Class [] {})), null);
      Stella.defineMethodObject("(DEFMETHOD DELETE-NEURAL-NETWORK ((SELF CHAMELEON-NEURAL-NETWORK)) :DOCUMENTATION \"Unlink the network `self' from its associated proposition and mark it as deleted.\" :PUBLIC? TRUE)", MethodCodeWrapper.wrapMethodCode(Native.find_java_method("edu.isi.powerloom.logic.ChameleonNeuralNetwork", "deleteNeuralNetwork", new java.lang.Class [] {})), null);
      Stella.defineMethodObject("(DEFMETHOD (DELETED? BOOLEAN) ((SELF CHAMELEON-NEURAL-NETWORK)) :DOCUMENTATION \"Return trun if `self' has been deleted.\" :PUBLIC? TRUE)", MethodCodeWrapper.wrapMethodCode(Native.find_java_method("edu.isi.powerloom.logic.ChameleonNeuralNetwork", "deletedP", new java.lang.Class [] {})), null);
      Stella.defineMethodObject("(DEFMETHOD ALLOCATE-NETWORK-ARRAYS ((SELF CHAMELEON-NEURAL-NETWORK) (NUM-IN INTEGER) (NUM-HIDDEN INTEGER) (NUM-OUT INTEGER)) :DOCUMENTATION \"Allocates array space for a neural network with given number of input, hidden and output units.\" :PUBLIC? TRUE)", MethodCodeWrapper.wrapMethodCode(Native.find_java_method("edu.isi.powerloom.logic.ChameleonNeuralNetwork", "allocateNetworkArrays", new java.lang.Class [] {java.lang.Integer.TYPE, java.lang.Integer.TYPE, java.lang.Integer.TYPE})), null);
      Stella.defineMethodObject("(DEFMETHOD RANDOMIZE-NETWORK-WEIGHTS ((SELF CHAMELEON-NEURAL-NETWORK)) :DOCUMENTATION \"Randomize the weights of the neural network `self'.\" :PUBLIC? TRUE)", MethodCodeWrapper.wrapMethodCode(Native.find_java_method("edu.isi.powerloom.logic.ChameleonNeuralNetwork", "randomizeNetworkWeights", new java.lang.Class [] {})), null);
      Stella.defineMethodObject("(DEFMETHOD BUILD-PROPOSITION-NETWORK ((SELF CHAMELEON-NEURAL-NETWORK) (PROP PROPOSITION)) :DOCUMENTATION \"Build a neural network for the proposition `prop'.  This builds a two-layer\nperceptron network whose input nodes are activated by the truth of `prop's arguments and whose\noutput node computes the truth of `prop'.\" :PUBLIC? TRUE)", MethodCodeWrapper.wrapMethodCode(Native.find_java_method("edu.isi.powerloom.logic.ChameleonNeuralNetwork", "buildPropositionNetwork", new java.lang.Class [] {Native.find_java_class("edu.isi.powerloom.logic.Proposition")})), null);
      Stella.defineMethodObject("(DEFMETHOD (NUMBER-OF-INPUTS INTEGER) ((SELF CHAMELEON-NEURAL-NETWORK)) :DOCUMENTATION \"Return the number of input values expected by `self' (ignores bias unit).\" :PUBLIC? TRUE :GLOBALLY-INLINE? TRUE (RETURN (1- (DIM1 (INPUT SELF)))))", MethodCodeWrapper.wrapMethodCode(Native.find_java_method("edu.isi.powerloom.logic.ChameleonNeuralNetwork", "numberOfInputs", new java.lang.Class [] {})), null);
      Stella.defineMethodObject("(DEFMETHOD (NTH-INPUT FLOAT) ((SELF CHAMELEON-NEURAL-NETWORK) (N INTEGER)) :DOCUMENTATION \"Return the 0-based `n'-th proposition input of `self' (ignores bias unit).\" :PUBLIC? TRUE :GLOBALLY-INLINE? TRUE (RETURN (1D-AREF (INPUT SELF) (1+ N))))", MethodCodeWrapper.wrapMethodCode(Native.find_java_method("edu.isi.powerloom.logic.ChameleonNeuralNetwork", "nthInput", new java.lang.Class [] {java.lang.Integer.TYPE})), null);
      Stella.defineMethodObject("(DEFMETHOD (NTH-INPUT-ERROR FLOAT) ((SELF CHAMELEON-NEURAL-NETWORK) (N INTEGER)) :DOCUMENTATION \"Return the 0-based `n'-th proposition input error of `self' (ignores bias unit).\" :PUBLIC? TRUE :GLOBALLY-INLINE? TRUE (RETURN (1D-AREF (INPUT-ERROR SELF) (1+ N))))", MethodCodeWrapper.wrapMethodCode(Native.find_java_method("edu.isi.powerloom.logic.ChameleonNeuralNetwork", "nthInputError", new java.lang.Class [] {java.lang.Integer.TYPE})), null);
      Stella.defineFunctionObject("COPY-FLOAT-VALUES-TO-BUFFER", "(DEFUN COPY-FLOAT-VALUES-TO-BUFFER ((VALUES OBJECT) (BUFFER (ARRAY () OF FLOAT)) (START INTEGER) (END INTEGER)) :DOCUMENTATION \"Copy the float `values' in sequence to `buffer' between `start' and `end'.\nMissing values will be set to 0.0, extra values will be ignored.\" :PUBLIC? TRUE)", Native.find_java_method("edu.isi.powerloom.logic.Logic", "copyFloatValuesToBuffer", new java.lang.Class [] {Native.find_java_class("edu.isi.stella.Stella_Object"), Native.find_java_class("[D"), java.lang.Integer.TYPE, java.lang.Integer.TYPE}), null);
      Stella.defineMethodObject("(DEFMETHOD SET-INPUT-VALUES ((SELF CHAMELEON-NEURAL-NETWORK) (VALUES OBJECT)) :DOCUMENTATION \"Set the current truth-value inputs of the network `self' to float `values' in sequence.\nMissing inputs will be set to 0.0, extra values will be ignored.\" :PUBLIC? TRUE)", MethodCodeWrapper.wrapMethodCode(Native.find_java_method("edu.isi.powerloom.logic.ChameleonNeuralNetwork", "setInputValues", new java.lang.Class [] {Native.find_java_class("edu.isi.stella.Stella_Object")})), null);
      Stella.defineMethodObject("(DEFMETHOD SET-VECTOR-INPUT-VALUES ((SELF CHAMELEON-NEURAL-NETWORK) (VECTORSPECS OBJECT)) :DOCUMENTATION \"Set the current vector inputs of the network `self' to the vectors described by `vectorSpecs'.\nEach vector spec describes a vector-generating proposition that produces one or more vectors.  How those specs\nare translated into actual numeric vectors such as embeddings is specific to the particular neural network type.\" :PUBLIC? TRUE)", MethodCodeWrapper.wrapMethodCode(Native.find_java_method("edu.isi.powerloom.logic.ChameleonNeuralNetwork", "setVectorInputValues", new java.lang.Class [] {Native.find_java_class("edu.isi.stella.Stella_Object")})), null);
      Stella.defineMethodObject("(DEFMETHOD (FORWARD-PROPAGATE-INPUTS FLOAT) ((SELF CHAMELEON-NEURAL-NETWORK)) :DOCUMENTATION \"Activates the current inputs of the network `self' to compute its output.\nSets `self's `output' slot and returns the computed value.  Reads input activations and\nweights and updates hidden and output activations.\" :PUBLIC? TRUE)", MethodCodeWrapper.wrapMethodCode(Native.find_java_method("edu.isi.powerloom.logic.ChameleonNeuralNetwork", "forwardPropagateInputs", new java.lang.Class [] {})), null);
      Stella.defineMethodObject("(DEFMETHOD BACKWARD-PROPAGATE-ERROR ((SELF CHAMELEON-NEURAL-NETWORK) (ERROR FLOAT)) :DOCUMENTATION \"Given a properly forward activated network `self' for the current set of inputs,\nand a training `error' between the current output and the goal value, backpropagate the error and\nupdate `self's vector of input errors.  Reads output, hidden activations and weights and updates\nhidden errors and input errors.\" :PUBLIC? TRUE)", MethodCodeWrapper.wrapMethodCode(Native.find_java_method("edu.isi.powerloom.logic.ChameleonNeuralNetwork", "backwardPropagateError", new java.lang.Class [] {java.lang.Double.TYPE})), null);
      Stella.defineMethodObject("(DEFMETHOD UPDATE-NETWORK-WEIGHTS ((SELF CHAMELEON-NEURAL-NETWORK) (ERROR FLOAT)) :DOCUMENTATION \"Given a properly forward activated and backpropagated network `self' for the current\ninputs and training `error', update the network's weights according to current gradients, learning rate\nand momentum terms to reduce the error for the given inputs.  Reads output, hidden and input activations,\nhidden error, weights and weight deltas, and updates weights and weight deltas.\" :PUBLIC? TRUE)", MethodCodeWrapper.wrapMethodCode(Native.find_java_method("edu.isi.powerloom.logic.ChameleonNeuralNetwork", "updateNetworkWeights", new java.lang.Class [] {java.lang.Double.TYPE})), null);
      Stella.defineMethodObject("(DEFMETHOD (VECTOR-ARGUMENT? BOOLEAN) ((SELF VECTOR-NEURAL-NETWORK) (ARG PROPOSITION)) :DOCUMENTATION \"Return TRUE if `arg' yields one or more vectors for `self's inputs.\" :PUBLIC? TRUE)", MethodCodeWrapper.wrapMethodCode(Native.find_java_method("edu.isi.powerloom.logic.VectorNeuralNetwork", "vectorArgumentP", new java.lang.Class [] {Native.find_java_class("edu.isi.powerloom.logic.Proposition")})), null);
      Stella.defineMethodObject("(DEFMETHOD (HAS-VECTOR-ARGUMENTS? BOOLEAN) ((SELF VECTOR-NEURAL-NETWORK)) :DOCUMENTATION \"Return TRUE if `self' has at least one vector input argument.\" :PUBLIC? TRUE)", MethodCodeWrapper.wrapMethodCode(Native.find_java_method("edu.isi.powerloom.logic.VectorNeuralNetwork", "hasVectorArgumentsP", new java.lang.Class [] {})), null);
      Stella.defineMethodObject("(DEFMETHOD (NUMBER-OF-VECTOR-ARGUMENTS INTEGER) ((SELF VECTOR-NEURAL-NETWORK) (PROP PROPOSITION)) :DOCUMENTATION \"Return the number of arguments of `prop' that yield one or more vectors\nfor `self's inputs.  `prop' can be NULL in which case the linked proposition will be used.\" :PUBLIC? TRUE)", MethodCodeWrapper.wrapMethodCode(Native.find_java_method("edu.isi.powerloom.logic.VectorNeuralNetwork", "numberOfVectorArguments", new java.lang.Class [] {Native.find_java_class("edu.isi.powerloom.logic.Proposition")})), null);
      Stella.defineMethodObject("(DEFMETHOD (VECTOR-ARGUMENT-INDEX INTEGER) ((SELF VECTOR-NEURAL-NETWORK) (ARG PROPOSITION)) :DOCUMENTATION \"Return the 0-based input position of vector argument `arg'.  Ignores bias unit which\nis a network-implementation-specific detail.  If `arg' is not a vector argument, returns -1.\" :PUBLIC? TRUE)", MethodCodeWrapper.wrapMethodCode(Native.find_java_method("edu.isi.powerloom.logic.VectorNeuralNetwork", "vectorArgumentIndex", new java.lang.Class [] {Native.find_java_class("edu.isi.powerloom.logic.Proposition")})), null);
      Stella.defineMethodObject("(DEFMETHOD (NUMBER-OF-VECTOR-ARGUMENT-SPECS INTEGER) ((SELF VECTOR-NEURAL-NETWORK) (PROP PROPOSITION)) :DOCUMENTATION \"Return the total number of argument specs generated by vector arguments of `prop'.\nThis is only different than `number-of-vector-arguments' if at least one of `prop's vector argument\nrelations has arity > 1.  `prop' can be NULL in which case the linked proposition will be used.\" :PUBLIC? TRUE)", MethodCodeWrapper.wrapMethodCode(Native.find_java_method("edu.isi.powerloom.logic.VectorNeuralNetwork", "numberOfVectorArgumentSpecs", new java.lang.Class [] {Native.find_java_class("edu.isi.powerloom.logic.Proposition")})), null);
      Stella.defineMethodObject("(DEFMETHOD (NUMBER-OF-VECTOR-ARGUMENT-INPUTS INTEGER) ((SELF VECTOR-NEURAL-NETWORK) (PROP PROPOSITION)) :DOCUMENTATION \"Return the total number of input positions to store all elements of all vector\narguments of `prop'.  `prop' can be NULL in which case the linked proposition will be used.\" :PUBLIC? TRUE)", MethodCodeWrapper.wrapMethodCode(Native.find_java_method("edu.isi.powerloom.logic.VectorNeuralNetwork", "numberOfVectorArgumentInputs", new java.lang.Class [] {Native.find_java_class("edu.isi.powerloom.logic.Proposition")})), null);
      Stella.defineMethodObject("(DEFMETHOD SET-VECTOR-INPUT-VALUES ((SELF VECTOR-NEURAL-NETWORK) (VECTORSPECS OBJECT)) :DOCUMENTATION \"Set the current vector inputs of the network `self' to the vectors described by `vectorSpecs'.\nEach vector spec describes a vector-generating proposition that produces one or more vectors.  How those specs\nare translated into actual numeric vectors such as embeddings is specific to the particular neural network type.\" :PUBLIC? TRUE)", MethodCodeWrapper.wrapMethodCode(Native.find_java_method("edu.isi.powerloom.logic.VectorNeuralNetwork", "setVectorInputValues", new java.lang.Class [] {Native.find_java_class("edu.isi.stella.Stella_Object")})), null);
      Stella.defineMethodObject("(DEFMETHOD (GET-VECTOR-ARGUMENT-SPEC OBJECT) ((SELF VECTOR-NEURAL-NETWORK) (ARG OBJECT)) :DOCUMENTATION \"Generate a single argument spec for `arg' that can be used for `set-vector-input-values'.\n`arg' can either be a proposition or justification.\" :PUBLIC? TRUE)", MethodCodeWrapper.wrapMethodCode(Native.find_java_method("edu.isi.powerloom.logic.VectorNeuralNetwork", "getVectorArgumentSpec", new java.lang.Class [] {Native.find_java_class("edu.isi.stella.Stella_Object")})), null);
      Stella.defineFunctionObject("REGISTER-TENSORFLOW-CALLBACK", "(DEFUN REGISTER-TENSORFLOW-CALLBACK ((NAME STRING) (CODE FUNCTION-CODE)) :DOCUMENTATION \"Special-purpose callback support that registers `code' under the logic symbol with `name',\nwhich by convention we make the qualified method name of the method we are using this for.  This is a\nspecial-purpose hack which eventually we might want to generalize so others can use it too.\" :PUBLIC? TRUE)", Native.find_java_method("edu.isi.powerloom.logic.Logic", "registerTensorflowCallback", new java.lang.Class [] {Native.find_java_class("java.lang.String"), Native.find_java_class("java.lang.reflect.Method")}), null);
      Stella.defineFunctionObject("GET-TENSORFLOW-CALLBACK", "(DEFUN (GET-TENSORFLOW-CALLBACK FUNCTION-CODE) ((NAME SYMBOL)) :DOCUMENTATION \"Access the TensorFlow callback code registered under `name'.\" :PUBLIC? TRUE :GLOBALLY-INLINE? TRUE (RETURN (SYMBOL-VALUE NAME)))", Native.find_java_method("edu.isi.powerloom.logic.Logic", "getTensorflowCallback", new java.lang.Class [] {Native.find_java_class("edu.isi.stella.Symbol")}), null);
      Stella.defineFunctionObject("TENSORFLOW-BACKEND-AVAILABLE?", "(DEFUN (TENSORFLOW-BACKEND-AVAILABLE? BOOLEAN) () :DOCUMENTATION \"Return TRUE if TensorFlow callbacks have been properly registered.\" :PUBLIC? TRUE)", Native.find_java_method("edu.isi.powerloom.logic.Logic", "tensorflowBackendAvailableP", new java.lang.Class [] {}), null);
      Stella.defineMethodObject("(DEFMETHOD LINK-NEURAL-NETWORK ((SELF TENSORFLOW-NEURAL-NETWORK) (PROP PROPOSITION)) :DOCUMENTATION \"Link the network `self' to its associated proposition `prop'.\" :PUBLIC? TRUE)", MethodCodeWrapper.wrapMethodCode(Native.find_java_method("edu.isi.powerloom.logic.TensorflowNeuralNetwork", "linkNeuralNetwork", new java.lang.Class [] {Native.find_java_class("edu.isi.powerloom.logic.Proposition")})), null);
      Stella.defineMethodObject("(DEFMETHOD UNLINK-NEURAL-NETWORK ((SELF TENSORFLOW-NEURAL-NETWORK)) :DOCUMENTATION \"Unlink the network `self' from its associated proposition.\" :PUBLIC? TRUE)", MethodCodeWrapper.wrapMethodCode(Native.find_java_method("edu.isi.powerloom.logic.TensorflowNeuralNetwork", "unlinkNeuralNetwork", new java.lang.Class [] {})), null);
      Stella.defineMethodObject("(DEFMETHOD (GET-NEURAL-NETWORK-PROPOSITION PROPOSITION) ((SELF TENSORFLOW-NEURAL-NETWORK)) :DOCUMENTATION \"Return the proposition linked to `self'.\" :PUBLIC? TRUE)", MethodCodeWrapper.wrapMethodCode(Native.find_java_method("edu.isi.powerloom.logic.TensorflowNeuralNetwork", "getNeuralNetworkProposition", new java.lang.Class [] {})), null);
      Stella.defineMethodObject("(DEFMETHOD DELETE-NEURAL-NETWORK ((SELF TENSORFLOW-NEURAL-NETWORK)) :DOCUMENTATION \"Unlink the network `self' from its associated proposition and mark it as deleted.\" :PUBLIC? TRUE)", MethodCodeWrapper.wrapMethodCode(Native.find_java_method("edu.isi.powerloom.logic.TensorflowNeuralNetwork", "deleteNeuralNetwork", new java.lang.Class [] {})), null);
      Stella.defineMethodObject("(DEFMETHOD (DELETED? BOOLEAN) ((SELF TENSORFLOW-NEURAL-NETWORK)) :DOCUMENTATION \"Return trun if `self' has been deleted.\" :PUBLIC? TRUE)", MethodCodeWrapper.wrapMethodCode(Native.find_java_method("edu.isi.powerloom.logic.TensorflowNeuralNetwork", "deletedP", new java.lang.Class [] {})), null);
      Stella.defineMethodObject("(DEFMETHOD ALLOCATE-NETWORK-ARRAYS ((SELF TENSORFLOW-NEURAL-NETWORK) (NUM-IN INTEGER) (NUM-HIDDEN INTEGER) (NUM-OUT INTEGER)) :DOCUMENTATION \"Allocates array space for a neural network with given number of input, hidden and output units.\" :PUBLIC? TRUE)", MethodCodeWrapper.wrapMethodCode(Native.find_java_method("edu.isi.powerloom.logic.TensorflowNeuralNetwork", "allocateNetworkArrays", new java.lang.Class [] {java.lang.Integer.TYPE, java.lang.Integer.TYPE, java.lang.Integer.TYPE})), null);
      Stella.defineMethodObject("(DEFMETHOD RANDOMIZE-NETWORK-WEIGHTS ((SELF TENSORFLOW-NEURAL-NETWORK)) :DOCUMENTATION \"Randomize the weights of the neural network `self'.\" :PUBLIC? TRUE)", MethodCodeWrapper.wrapMethodCode(Native.find_java_method("edu.isi.powerloom.logic.TensorflowNeuralNetwork", "randomizeNetworkWeights", new java.lang.Class [] {})), null);
      Stella.defineMethodObject("(DEFMETHOD INITIALIZE-NETWORK-WEIGHTS ((SELF TENSORFLOW-NEURAL-NETWORK)) :DOCUMENTATION \"Initialize the weights of the neural network `self' - eiher randomly or from a saved state.\" :PUBLIC? TRUE)", MethodCodeWrapper.wrapMethodCode(Native.find_java_method("edu.isi.powerloom.logic.TensorflowNeuralNetwork", "initializeNetworkWeights", new java.lang.Class [] {})), null);
      Stella.defineMethodObject("(DEFMETHOD BUILD-PROPOSITION-NETWORK ((SELF TENSORFLOW-NEURAL-NETWORK) (PROP PROPOSITION)) :DOCUMENTATION \"Build a neural network for the proposition `prop'.  This builds a two-layer\nperceptron network whose input nodes are activated by the truth of `prop's arguments and whose\noutput node computes the truth of `prop'.\" :PUBLIC? TRUE)", MethodCodeWrapper.wrapMethodCode(Native.find_java_method("edu.isi.powerloom.logic.TensorflowNeuralNetwork", "buildPropositionNetwork", new java.lang.Class [] {Native.find_java_class("edu.isi.powerloom.logic.Proposition")})), null);
      Stella.defineMethodObject("(DEFMETHOD (NUMBER-OF-INPUTS INTEGER) ((SELF TENSORFLOW-NEURAL-NETWORK)) :DOCUMENTATION \"Return the number of input values expected by `self' (ignores bias unit).\" :PUBLIC? TRUE :GLOBALLY-INLINE? TRUE (RETURN (FUNCALL (GET-TENSORFLOW-CALLBACK (QUOTE TENSORFLOW-NEURAL-NETWORK.NUMBER-OF-INPUTS)) SELF)))", MethodCodeWrapper.wrapMethodCode(Native.find_java_method("edu.isi.powerloom.logic.TensorflowNeuralNetwork", "numberOfInputs", new java.lang.Class [] {})), null);
      Stella.defineMethodObject("(DEFMETHOD (NTH-INPUT FLOAT) ((SELF TENSORFLOW-NEURAL-NETWORK) (N INTEGER)) :DOCUMENTATION \"Return the 0-based `n'-th proposition input of `self' (ignores bias unit).\" :PUBLIC? TRUE :GLOBALLY-INLINE? TRUE (RETURN (FUNCALL (GET-TENSORFLOW-CALLBACK (QUOTE TENSORFLOW-NEURAL-NETWORK.NTH-INPUT)) SELF N)))", MethodCodeWrapper.wrapMethodCode(Native.find_java_method("edu.isi.powerloom.logic.TensorflowNeuralNetwork", "nthInput", new java.lang.Class [] {java.lang.Integer.TYPE})), null);
      Stella.defineMethodObject("(DEFMETHOD (NTH-INPUT-ERROR FLOAT) ((SELF TENSORFLOW-NEURAL-NETWORK) (N INTEGER)) :DOCUMENTATION \"Return the 0-based `n'-th proposition input error of `self' (ignores bias unit).\" :PUBLIC? TRUE :GLOBALLY-INLINE? TRUE (RETURN (FUNCALL (GET-TENSORFLOW-CALLBACK (QUOTE TENSORFLOW-NEURAL-NETWORK.NTH-INPUT-ERROR)) SELF N)))", MethodCodeWrapper.wrapMethodCode(Native.find_java_method("edu.isi.powerloom.logic.TensorflowNeuralNetwork", "nthInputError", new java.lang.Class [] {java.lang.Integer.TYPE})), null);
    }
  }

  static void helpStartupChameleon6() {
    {
      Stella.defineMethodObject("(DEFMETHOD SET-INPUT-VALUES ((SELF TENSORFLOW-NEURAL-NETWORK) (VALUES OBJECT)) :DOCUMENTATION \"Set the current truth-value inputs of the network `self' to float `values' in sequence.\nMissing inputs will be set to 0.0, extra values will be ignored.\" :PUBLIC? TRUE)", MethodCodeWrapper.wrapMethodCode(Native.find_java_method("edu.isi.powerloom.logic.TensorflowNeuralNetwork", "setInputValues", new java.lang.Class [] {Native.find_java_class("edu.isi.stella.Stella_Object")})), null);
      Stella.defineMethodObject("(DEFMETHOD (GET-VECTOR-ARGUMENT-SPEC OBJECT) ((SELF TENSORFLOW-NEURAL-NETWORK) (ARG OBJECT)) :DOCUMENTATION \"Generate a single argument spec for `arg' that can be used for `set-vector-input-values'.\n`arg' can either be a proposition or justification.\" :PUBLIC? TRUE)", MethodCodeWrapper.wrapMethodCode(Native.find_java_method("edu.isi.powerloom.logic.TensorflowNeuralNetwork", "getVectorArgumentSpec", new java.lang.Class [] {Native.find_java_class("edu.isi.stella.Stella_Object")})), null);
      Stella.defineMethodObject("(DEFMETHOD SET-VECTOR-INPUT-VALUES ((SELF TENSORFLOW-NEURAL-NETWORK) (VECTORSPECS OBJECT)) :DOCUMENTATION \"Set the current vector inputs of the network `self' to the vectors described by `vectorSpecs'.\nEach vector spec describes a vector-generating proposition that produces one or more vectors.  How those specs\nare translated into actual numeric vectors such as embeddings is specific to the particular neural network type.\" :PUBLIC? TRUE)", MethodCodeWrapper.wrapMethodCode(Native.find_java_method("edu.isi.powerloom.logic.TensorflowNeuralNetwork", "setVectorInputValues", new java.lang.Class [] {Native.find_java_class("edu.isi.stella.Stella_Object")})), null);
      Stella.defineMethodObject("(DEFMETHOD (FORWARD-PROPAGATE-INPUTS FLOAT) ((SELF TENSORFLOW-NEURAL-NETWORK)) :DOCUMENTATION \"Activates the current inputs of the network `self' to compute its output.\nSets `self's `output' slot and returns the computed value.  Reads input activations and\nweights and updates hidden and output activations.\" :PUBLIC? TRUE)", MethodCodeWrapper.wrapMethodCode(Native.find_java_method("edu.isi.powerloom.logic.TensorflowNeuralNetwork", "forwardPropagateInputs", new java.lang.Class [] {})), null);
      Stella.defineMethodObject("(DEFMETHOD BACKWARD-PROPAGATE-ERROR ((SELF TENSORFLOW-NEURAL-NETWORK) (ERROR FLOAT)) :DOCUMENTATION \"Given a properly forward activated network `self' for the current set of inputs,\nand a training `error' between the current output and the goal value, backpropagate the error and\nupdate `self's vector of input errors.  Reads output, hidden activations and weights and updates\nhidden errors and input errors.\" :PUBLIC? TRUE)", MethodCodeWrapper.wrapMethodCode(Native.find_java_method("edu.isi.powerloom.logic.TensorflowNeuralNetwork", "backwardPropagateError", new java.lang.Class [] {java.lang.Double.TYPE})), null);
      Stella.defineMethodObject("(DEFMETHOD UPDATE-NETWORK-WEIGHTS ((SELF TENSORFLOW-NEURAL-NETWORK) (ERROR FLOAT)) :DOCUMENTATION \"Given a properly forward activated and backpropagated network `self' for the current\ninputs and training `error', update the network's weights according to current gradients, learning rate\nand momentum terms to reduce the error for the given inputs.  Reads output, hidden and input activations,\nhidden error, weights and weight deltas, and updates weights and weight deltas.\" :PUBLIC? TRUE)", MethodCodeWrapper.wrapMethodCode(Native.find_java_method("edu.isi.powerloom.logic.TensorflowNeuralNetwork", "updateNetworkWeights", new java.lang.Class [] {java.lang.Double.TYPE})), null);
      Stella.defineFunctionObject("GET-CACHED-NETWORK-PROOF", "(DEFUN (GET-CACHED-NETWORK-PROOF JUSTIFICATION) ((EXAMPLE TRAINING-EXAMPLE)) :DOCUMENTATION \"Variant of `create-cached-network' that takes a training `example',\nruns its cons query, and stores a compacted version of the associated proof tree\nas the `example's cached solution which will also be returned.  If a cached and\nup-to-date solution already exists, it will be returned instead.\" :PUBLIC? TRUE)", Native.find_java_method("edu.isi.powerloom.logic.TrainingExample", "getCachedNetworkProof", new java.lang.Class [] {Native.find_java_class("edu.isi.powerloom.logic.TrainingExample")}), null);
      Stella.defineFunctionObject("COMPACT-PARTIAL-PROOF-TO-NETWORK-PROOF", "(DEFUN (COMPACT-PARTIAL-PROOF-TO-NETWORK-PROOF JUSTIFICATION) ((PROOF JUSTIFICATION)) :DOCUMENTATION \"Convert `proof' into a compacted network tree form that only contains\n:AND, :OR, :MULTI and :PRIMITIVE nodes (some of which such as `instance-of' might contain\nfurther antecedents if they were computed by specialists, for example).\" :PUBLIC? TRUE)", Native.find_java_method("edu.isi.powerloom.logic.Justification", "compactPartialProofToNetworkProof", new java.lang.Class [] {Native.find_java_class("edu.isi.powerloom.logic.Justification")}), null);
      Stella.defineFunctionObject("COMBINE-MULTIPLE-MATCH-SCORES", "(DEFUN (COMBINE-MULTIPLE-MATCH-SCORES FLOAT) ((SCORES (CONS OF FLOAT-WRAPPER))) :DOCUMENTATION \"Combine partial match scores from alternative :multiple-proofs `scores'\naccording to the current `*rule-combination*' strategy.\" :PUBLIC? TRUE)", Native.find_java_method("edu.isi.powerloom.logic.Logic", "combineMultipleMatchScores", new java.lang.Class [] {Native.find_java_class("edu.isi.stella.Cons")}), null);
      Stella.defineFunctionObject("FORWARD-PROPAGATE-CACHED-NETWORK-PROOF", "(DEFUN (FORWARD-PROPAGATE-CACHED-NETWORK-PROOF FLOAT) ((PROOF JUSTIFICATION)) :DOCUMENTATION \"Compute the same partial match score as the call to `compute-partial-truth'\nthat generated `proof' (which is assumed to have been compacted with a call to\n`compact-partial-proof-to-network-proof'.  The score will only be identical of course, if\nthe various networks and their weights have not yet been updated during learning.\" :PUBLIC? TRUE)", Native.find_java_method("edu.isi.powerloom.logic.Justification", "forwardPropagateCachedNetworkProof", new java.lang.Class [] {Native.find_java_class("edu.isi.powerloom.logic.Justification")}), null);
      Stella.defineFunctionObject("FORWARD-PROPAGATE-CACHED-NETWORK-FROM-JUSTIFICATION", "(DEFUN (FORWARD-PROPAGATE-CACHED-NETWORK-FROM-JUSTIFICATION FLOAT) ((JUST JUSTIFICATION)) :DOCUMENTATION \"Locally forward-propagate the network associated with `just' based on\npreviously cached `positive-score's of antecedents.\" :PUBLIC? TRUE)", Native.find_java_method("edu.isi.powerloom.logic.Justification", "forwardPropagateCachedNetworkFromJustification", new java.lang.Class [] {Native.find_java_class("edu.isi.powerloom.logic.Justification")}), null);
      Stella.defineFunctionObject("BACKWARD-PROPAGATE-CACHED-NETWORK-PROOF", "(DEFUN BACKWARD-PROPAGATE-CACHED-NETWORK-PROOF ((PROOF JUSTIFICATION) (ERROR FLOAT)) :DOCUMENTATION \"Propagate the `error' between `proof's conclusion and the desired target value\nthrough `proof's network and its antecedents, and adjust weights to decrease the error.  Multiple\niterations through `forward/backward-propagate-cached-network-proof' with updated top-level\nerrors will train the involved networks to minimize the error as much as possible.\" :PUBLIC? TRUE)", Native.find_java_method("edu.isi.powerloom.logic.Justification", "backwardPropagateCachedNetworkProof", new java.lang.Class [] {Native.find_java_class("edu.isi.powerloom.logic.Justification"), java.lang.Double.TYPE}), null);
      Stella.defineFunctionObject("BACKWARD-PROPAGATE-CACHED-NETWORK-MULTI-PROOF", "(DEFUN BACKWARD-PROPAGATE-CACHED-NETWORK-MULTI-PROOF ((PROOF JUSTIFICATION) (ERROR FLOAT)) :DOCUMENTATION \"Recurse through :multiple-proofs antecedents guided by the current rule combination scheme.\" :PUBLIC? TRUE)", Native.find_java_method("edu.isi.powerloom.logic.Justification", "backwardPropagateCachedNetworkMultiProof", new java.lang.Class [] {Native.find_java_class("edu.isi.powerloom.logic.Justification"), java.lang.Double.TYPE}), null);
      Stella.defineMethodObject("(DEFMETHOD CLEAR-BATCH-ARRAYS ((SELF NEURAL-NETWORK)) :DOCUMENTATION \"Clear all currently batched inputs (with keys) and associated target values.\" :PUBLIC? TRUE)", MethodCodeWrapper.wrapMethodCode(Native.find_java_method("edu.isi.powerloom.logic.NeuralNetwork", "clearBatchArrays", new java.lang.Class [] {})), null);
      Stella.defineMethodObject("(DEFMETHOD (CURRENT-BATCH-SIZE INTEGER) ((SELF NEURAL-NETWORK)) :DOCUMENTATION \"Return the number of currently batched inputs.\" :PUBLIC? TRUE)", MethodCodeWrapper.wrapMethodCode(Native.find_java_method("edu.isi.powerloom.logic.NeuralNetwork", "currentBatchSize", new java.lang.Class [] {})), null);
      Stella.defineMethodObject("(DEFMETHOD (BATCH-IS-FULL? BOOLEAN) ((SELF NEURAL-NETWORK)) :DOCUMENTATION \"Return true if input batch arrays have been filled to capacity.\" :PUBLIC? TRUE)", MethodCodeWrapper.wrapMethodCode(Native.find_java_method("edu.isi.powerloom.logic.NeuralNetwork", "batchIsFullP", new java.lang.Class [] {})), null);
      Stella.defineMethodObject("(DEFMETHOD PUSH-INPUT-VALUES ((SELF NEURAL-NETWORK) (KEY OBJECT) (VALUES OBJECT)) :DOCUMENTATION \"Push input `values' onto the input batch array and associate them with `key' (which can be NULL).\nAssociating a key lets us easily map inputs/outputs to some processing object of interest (e.g., a justification).\" :PUBLIC? TRUE)", MethodCodeWrapper.wrapMethodCode(Native.find_java_method("edu.isi.powerloom.logic.NeuralNetwork", "pushInputValues", new java.lang.Class [] {Native.find_java_class("edu.isi.stella.Stella_Object"), Native.find_java_class("edu.isi.stella.Stella_Object")})), null);
      Stella.defineMethodObject("(DEFMETHOD PUSH-VECTOR-INPUT-VALUES ((SELF NEURAL-NETWORK) (VECTORSPECS OBJECT)) :DOCUMENTATION \"Push `vectorSpecs' onto the vector argument batch array which is assumed to correspond to the input\nvalues at the same respective position in the batch.  Truth-valued and vector-valued inputs are associated by position\nin the batch, they can be pushed independently, as long as they are fully synchronized when processing of the batch starts.\nIf `self' has no vector-valued argument, the associated batch array can be left undefined.\" :PUBLIC? TRUE)", MethodCodeWrapper.wrapMethodCode(Native.find_java_method("edu.isi.powerloom.logic.NeuralNetwork", "pushVectorInputValues", new java.lang.Class [] {Native.find_java_class("edu.isi.stella.Stella_Object")})), null);
      Stella.defineMethodObject("(DEFMETHOD PUSH-TARGET-VALUE ((SELF NEURAL-NETWORK) (VALUE FLOAT)) :DOCUMENTATION \"Push a target `value' onto the target batch array which is assumed to correspond to the input\nvalues at the same respective position in the batch.  Inputs and targets are associated by position in the batch,\nthey can be pushed independently, as long as they are fully synchronized when processing of the batch starts.\" :PUBLIC? TRUE)", MethodCodeWrapper.wrapMethodCode(Native.find_java_method("edu.isi.powerloom.logic.NeuralNetwork", "pushTargetValue", new java.lang.Class [] {java.lang.Double.TYPE})), null);
      Stella.defineMethodObject("(DEFMETHOD (NTH-BATCH-KEY OBJECT) ((SELF NEURAL-NETWORK) (N INTEGER)) :DOCUMENTATION \"Return the key associated with the `n'-th set of inputs in the input batch.\" :PUBLIC? TRUE)", MethodCodeWrapper.wrapMethodCode(Native.find_java_method("edu.isi.powerloom.logic.NeuralNetwork", "nthBatchKey", new java.lang.Class [] {java.lang.Integer.TYPE})), null);
      Stella.defineMethodObject("(DEFMETHOD (NTH-KTH-BATCH-INPUT-ERROR FLOAT) ((SELF NEURAL-NETWORK) (N INTEGER) (K INTEGER)) :DOCUMENTATION \"Return error of the `k'-th input in the `n'-th set of inputs in the input batch.\n`k' ignores the bias unit.\" :PUBLIC? TRUE)", MethodCodeWrapper.wrapMethodCode(Native.find_java_method("edu.isi.powerloom.logic.NeuralNetwork", "nthKthBatchInputError", new java.lang.Class [] {java.lang.Integer.TYPE, java.lang.Integer.TYPE})), null);
      Stella.defineMethodObject("(DEFMETHOD (NTH-BATCH-OUTPUT FLOAT) ((SELF NEURAL-NETWORK) (N INTEGER)) :DOCUMENTATION \"Return the output value for the `n'-th set of inputs in the input batch.\" :PUBLIC? TRUE)", MethodCodeWrapper.wrapMethodCode(Native.find_java_method("edu.isi.powerloom.logic.NeuralNetwork", "nthBatchOutput", new java.lang.Class [] {java.lang.Integer.TYPE})), null);
      Stella.defineMethodObject("(DEFMETHOD (BATCH-FORWARD-PROPAGATE-INPUTS FLOAT-ARRAY) ((SELF NEURAL-NETWORK)) :DOCUMENTATION \"Run forward propagation on the current input batch and store outputs in the output batch.\" :PUBLIC? TRUE)", MethodCodeWrapper.wrapMethodCode(Native.find_java_method("edu.isi.powerloom.logic.NeuralNetwork", "batchForwardPropagateInputs", new java.lang.Class [] {})), null);
      Stella.defineMethodObject("(DEFMETHOD BATCH-BACKWARD-PROPAGATE-ERROR ((SELF NEURAL-NETWORK)) :DOCUMENTATION \"Run backward propagation on the current input and target batch and store back-propagated\nerrors in the input error batch.\" :PUBLIC? TRUE)", MethodCodeWrapper.wrapMethodCode(Native.find_java_method("edu.isi.powerloom.logic.NeuralNetwork", "batchBackwardPropagateError", new java.lang.Class [] {})), null);
      Stella.defineMethodObject("(DEFMETHOD BATCH-UPDATE-NETWORK-WEIGHTS ((SELF NEURAL-NETWORK)) :DOCUMENTATION \"Run weight updates for the current input and target batches.\" :PUBLIC? TRUE)", MethodCodeWrapper.wrapMethodCode(Native.find_java_method("edu.isi.powerloom.logic.NeuralNetwork", "batchUpdateNetworkWeights", new java.lang.Class [] {})), null);
      Stella.defineMethodObject("(DEFMETHOD ALLOCATE-NETWORK-ARRAYS ((SELF CHAMELEON-BATCH-NEURAL-NETWORK) (NUM-IN INTEGER) (NUM-HIDDEN INTEGER) (NUM-OUT INTEGER)) :PUBLIC? TRUE)", MethodCodeWrapper.wrapMethodCode(Native.find_java_method("edu.isi.powerloom.logic.ChameleonBatchNeuralNetwork", "allocateNetworkArrays", new java.lang.Class [] {java.lang.Integer.TYPE, java.lang.Integer.TYPE, java.lang.Integer.TYPE})), null);
      Stella.defineMethodObject("(DEFMETHOD CLEAR-BATCH-ARRAYS ((SELF CHAMELEON-BATCH-NEURAL-NETWORK)))", MethodCodeWrapper.wrapMethodCode(Native.find_java_method("edu.isi.powerloom.logic.ChameleonBatchNeuralNetwork", "clearBatchArrays", new java.lang.Class [] {})), null);
      Stella.defineMethodObject("(DEFMETHOD (CURRENT-BATCH-SIZE INTEGER) ((SELF CHAMELEON-BATCH-NEURAL-NETWORK)))", MethodCodeWrapper.wrapMethodCode(Native.find_java_method("edu.isi.powerloom.logic.ChameleonBatchNeuralNetwork", "currentBatchSize", new java.lang.Class [] {})), null);
      Stella.defineMethodObject("(DEFMETHOD (BATCH-IS-FULL? BOOLEAN) ((SELF CHAMELEON-BATCH-NEURAL-NETWORK)))", MethodCodeWrapper.wrapMethodCode(Native.find_java_method("edu.isi.powerloom.logic.ChameleonBatchNeuralNetwork", "batchIsFullP", new java.lang.Class [] {})), null);
      Stella.defineMethodObject("(DEFMETHOD PUSH-INPUT-VALUES ((SELF CHAMELEON-BATCH-NEURAL-NETWORK) (KEY OBJECT) (VALUES OBJECT)))", MethodCodeWrapper.wrapMethodCode(Native.find_java_method("edu.isi.powerloom.logic.ChameleonBatchNeuralNetwork", "pushInputValues", new java.lang.Class [] {Native.find_java_class("edu.isi.stella.Stella_Object"), Native.find_java_class("edu.isi.stella.Stella_Object")})), null);
      Stella.defineMethodObject("(DEFMETHOD PUSH-TARGET-VALUE ((SELF CHAMELEON-BATCH-NEURAL-NETWORK) (VALUE FLOAT)))", MethodCodeWrapper.wrapMethodCode(Native.find_java_method("edu.isi.powerloom.logic.ChameleonBatchNeuralNetwork", "pushTargetValue", new java.lang.Class [] {java.lang.Double.TYPE})), null);
      Stella.defineMethodObject("(DEFMETHOD (NTH-BATCH-KEY OBJECT) ((SELF CHAMELEON-BATCH-NEURAL-NETWORK) (N INTEGER)))", MethodCodeWrapper.wrapMethodCode(Native.find_java_method("edu.isi.powerloom.logic.ChameleonBatchNeuralNetwork", "nthBatchKey", new java.lang.Class [] {java.lang.Integer.TYPE})), null);
      Stella.defineMethodObject("(DEFMETHOD (NTH-KTH-BATCH-INPUT-ERROR FLOAT) ((SELF CHAMELEON-BATCH-NEURAL-NETWORK) (N INTEGER) (K INTEGER)))", MethodCodeWrapper.wrapMethodCode(Native.find_java_method("edu.isi.powerloom.logic.ChameleonBatchNeuralNetwork", "nthKthBatchInputError", new java.lang.Class [] {java.lang.Integer.TYPE, java.lang.Integer.TYPE})), null);
      Stella.defineMethodObject("(DEFMETHOD (NTH-BATCH-OUTPUT FLOAT) ((SELF CHAMELEON-BATCH-NEURAL-NETWORK) (N INTEGER)))", MethodCodeWrapper.wrapMethodCode(Native.find_java_method("edu.isi.powerloom.logic.ChameleonBatchNeuralNetwork", "nthBatchOutput", new java.lang.Class [] {java.lang.Integer.TYPE})), null);
      Stella.defineMethodObject("(DEFMETHOD (BATCH-FORWARD-PROPAGATE-INPUTS FLOAT-ARRAY) ((SELF CHAMELEON-BATCH-NEURAL-NETWORK)) :PUBLIC? TRUE)", MethodCodeWrapper.wrapMethodCode(Native.find_java_method("edu.isi.powerloom.logic.ChameleonBatchNeuralNetwork", "batchForwardPropagateInputs", new java.lang.Class [] {})), null);
      Stella.defineMethodObject("(DEFMETHOD (COPY-INPUT-ERROR FLOAT-ARRAY) ((SELF CHAMELEON-BATCH-NEURAL-NETWORK)))", MethodCodeWrapper.wrapMethodCode(Native.find_java_method("edu.isi.powerloom.logic.ChameleonBatchNeuralNetwork", "copyInputError", new java.lang.Class [] {})), null);
      Stella.defineMethodObject("(DEFMETHOD BATCH-BACKWARD-PROPAGATE-ERROR ((SELF CHAMELEON-BATCH-NEURAL-NETWORK)) :PUBLIC? TRUE)", MethodCodeWrapper.wrapMethodCode(Native.find_java_method("edu.isi.powerloom.logic.ChameleonBatchNeuralNetwork", "batchBackwardPropagateError", new java.lang.Class [] {})), null);
      Stella.defineMethodObject("(DEFMETHOD BATCH-UPDATE-NETWORK-WEIGHTS ((SELF CHAMELEON-BATCH-NEURAL-NETWORK)) :PUBLIC? TRUE)", MethodCodeWrapper.wrapMethodCode(Native.find_java_method("edu.isi.powerloom.logic.ChameleonBatchNeuralNetwork", "batchUpdateNetworkWeights", new java.lang.Class [] {})), null);
      Stella.defineMethodObject("(DEFMETHOD (THE-ARRAY-READER (ARRAY () OF (LIKE (ANY-VALUE SELF)))) ((SELF 2D-LONG-ARRAY)) :PUBLIC? TRUE)", MethodCodeWrapper.wrapMethodCode(Native.find_java_method("edu.isi.powerloom.logic.twoDLongArray", "theArrayReader", new java.lang.Class [] {})), null);
      Stella.defineMethodObject("(DEFMETHOD PRINT-NETWORK-ARRAYS ((SELF TENSORFLOW-BATCH-NEURAL-NETWORK)))", MethodCodeWrapper.wrapMethodCode(Native.find_java_method("edu.isi.powerloom.logic.TensorflowBatchNeuralNetwork", "printNetworkArrays", new java.lang.Class [] {})), null);
      Stella.defineMethodObject("(DEFMETHOD ALLOCATE-NETWORK-ARRAYS ((SELF TENSORFLOW-BATCH-NEURAL-NETWORK) (NUM-IN INTEGER) (NUM-HIDDEN INTEGER) (NUM-OUT INTEGER)) :PUBLIC? TRUE)", MethodCodeWrapper.wrapMethodCode(Native.find_java_method("edu.isi.powerloom.logic.TensorflowBatchNeuralNetwork", "allocateNetworkArrays", new java.lang.Class [] {java.lang.Integer.TYPE, java.lang.Integer.TYPE, java.lang.Integer.TYPE})), null);
      Stella.defineMethodObject("(DEFMETHOD BUILD-PROPOSITION-NETWORK ((SELF TENSORFLOW-BATCH-NEURAL-NETWORK) (PROP PROPOSITION)) :DOCUMENTATION \"Build a neural network for the proposition `prop'.  This builds a two-layer\nperceptron network whose input nodes are activated by the truth of `prop's arguments and whose\noutput node computes the truth of `prop'.\" :PUBLIC? TRUE)", MethodCodeWrapper.wrapMethodCode(Native.find_java_method("edu.isi.powerloom.logic.TensorflowBatchNeuralNetwork", "buildPropositionNetwork", new java.lang.Class [] {Native.find_java_class("edu.isi.powerloom.logic.Proposition")})), null);
      Stella.defineMethodObject("(DEFMETHOD (NUMBER-OF-INPUTS INTEGER) ((SELF TENSORFLOW-BATCH-NEURAL-NETWORK)) :DOCUMENTATION \"Return the number of input values expected by `self' (ignores bias unit).\" :PUBLIC? TRUE :GLOBALLY-INLINE? TRUE (RETURN (1- (DIM2 (INPUT-BATCH SELF)))))", MethodCodeWrapper.wrapMethodCode(Native.find_java_method("edu.isi.powerloom.logic.TensorflowBatchNeuralNetwork", "numberOfInputs", new java.lang.Class [] {})), null);
      Stella.defineMethodObject("(DEFMETHOD (NTH-INPUT FLOAT) ((SELF TENSORFLOW-BATCH-NEURAL-NETWORK) (N INTEGER)) :DOCUMENTATION \"Return the 0-based `n'-th proposition input of `self' (ignores bias unit).\" :PUBLIC? TRUE :GLOBALLY-INLINE? TRUE (IGNORE N) (ERROR \"nth-input: not supported on: \" SELF))", MethodCodeWrapper.wrapMethodCode(Native.find_java_method("edu.isi.powerloom.logic.TensorflowBatchNeuralNetwork", "nthInput", new java.lang.Class [] {java.lang.Integer.TYPE})), null);
      Stella.defineMethodObject("(DEFMETHOD (NTH-INPUT-ERROR FLOAT) ((SELF TENSORFLOW-BATCH-NEURAL-NETWORK) (N INTEGER)) :DOCUMENTATION \"Return the 0-based `n'-th proposition input error of `self' (ignores bias unit).\" :PUBLIC? TRUE :GLOBALLY-INLINE? TRUE (IGNORE N) (ERROR \"nth-input-error: not supported on: \" SELF))", MethodCodeWrapper.wrapMethodCode(Native.find_java_method("edu.isi.powerloom.logic.TensorflowBatchNeuralNetwork", "nthInputError", new java.lang.Class [] {java.lang.Integer.TYPE})), null);
      Stella.defineMethodObject("(DEFMETHOD SET-INPUT-VALUES ((SELF TENSORFLOW-BATCH-NEURAL-NETWORK) (VALUES OBJECT)) :DOCUMENTATION \"Set the current truth-value inputs of the network `self' to float `values' in sequence.\nMissing inputs will be set to 0.0, extra values will be ignored.\" :PUBLIC? TRUE)", MethodCodeWrapper.wrapMethodCode(Native.find_java_method("edu.isi.powerloom.logic.TensorflowBatchNeuralNetwork", "setInputValues", new java.lang.Class [] {Native.find_java_class("edu.isi.stella.Stella_Object")})), null);
      Stella.defineMethodObject("(DEFMETHOD (GET-VECTOR-ARGUMENT-SPEC OBJECT) ((SELF TENSORFLOW-BATCH-NEURAL-NETWORK) (ARG OBJECT)) :DOCUMENTATION \"Generate a single argument spec for `arg' that can be used for `set-vector-input-values'.\n`arg' can either be a proposition or justification.\" :PUBLIC? TRUE)", MethodCodeWrapper.wrapMethodCode(Native.find_java_method("edu.isi.powerloom.logic.TensorflowBatchNeuralNetwork", "getVectorArgumentSpec", new java.lang.Class [] {Native.find_java_class("edu.isi.stella.Stella_Object")})), null);
      Stella.defineMethodObject("(DEFMETHOD SET-VECTOR-INPUT-VALUES ((SELF TENSORFLOW-BATCH-NEURAL-NETWORK) (VECTORSPECS OBJECT)) :DOCUMENTATION \"Set the current vector inputs of the network `self' to the vectors described by `vectorSpecs'.\nEach vector spec describes a vector-generating proposition that produces one or more vectors.  How those specs\nare translated into actual numeric vectors such as embeddings is specific to the particular neural network type.\" :PUBLIC? TRUE)", MethodCodeWrapper.wrapMethodCode(Native.find_java_method("edu.isi.powerloom.logic.TensorflowBatchNeuralNetwork", "setVectorInputValues", new java.lang.Class [] {Native.find_java_class("edu.isi.stella.Stella_Object")})), null);
      Stella.defineMethodObject("(DEFMETHOD (FORWARD-PROPAGATE-INPUTS FLOAT) ((SELF TENSORFLOW-BATCH-NEURAL-NETWORK)) :DOCUMENTATION \"Activates the current inputs of the network `self' to compute its output.\nSets `self's `output' slot and returns the computed value.  Reads input activations and\nweights and updates hidden and output activations.\" :PUBLIC? TRUE)", MethodCodeWrapper.wrapMethodCode(Native.find_java_method("edu.isi.powerloom.logic.TensorflowBatchNeuralNetwork", "forwardPropagateInputs", new java.lang.Class [] {})), null);
      Stella.defineMethodObject("(DEFMETHOD CLEAR-BATCH-ARRAYS ((SELF TENSORFLOW-BATCH-NEURAL-NETWORK)))", MethodCodeWrapper.wrapMethodCode(Native.find_java_method("edu.isi.powerloom.logic.TensorflowBatchNeuralNetwork", "clearBatchArrays", new java.lang.Class [] {})), null);
      Stella.defineMethodObject("(DEFMETHOD (CURRENT-BATCH-SIZE INTEGER) ((SELF TENSORFLOW-BATCH-NEURAL-NETWORK)))", MethodCodeWrapper.wrapMethodCode(Native.find_java_method("edu.isi.powerloom.logic.TensorflowBatchNeuralNetwork", "currentBatchSize", new java.lang.Class [] {})), null);
      Stella.defineMethodObject("(DEFMETHOD (BATCH-IS-FULL? BOOLEAN) ((SELF TENSORFLOW-BATCH-NEURAL-NETWORK)))", MethodCodeWrapper.wrapMethodCode(Native.find_java_method("edu.isi.powerloom.logic.TensorflowBatchNeuralNetwork", "batchIsFullP", new java.lang.Class [] {})), null);
      Stella.defineMethodObject("(DEFMETHOD PUSH-INPUT-VALUES ((SELF TENSORFLOW-BATCH-NEURAL-NETWORK) (KEY OBJECT) (VALUES OBJECT)))", MethodCodeWrapper.wrapMethodCode(Native.find_java_method("edu.isi.powerloom.logic.TensorflowBatchNeuralNetwork", "pushInputValues", new java.lang.Class [] {Native.find_java_class("edu.isi.stella.Stella_Object"), Native.find_java_class("edu.isi.stella.Stella_Object")})), null);
      Stella.defineMethodObject("(DEFMETHOD PUSH-VECTOR-INPUT-VALUES ((SELF TENSORFLOW-BATCH-NEURAL-NETWORK) (VECTORSPECS OBJECT)))", MethodCodeWrapper.wrapMethodCode(Native.find_java_method("edu.isi.powerloom.logic.TensorflowBatchNeuralNetwork", "pushVectorInputValues", new java.lang.Class [] {Native.find_java_class("edu.isi.stella.Stella_Object")})), null);
      Stella.defineMethodObject("(DEFMETHOD PUSH-TARGET-VALUE ((SELF TENSORFLOW-BATCH-NEURAL-NETWORK) (VALUE FLOAT)))", MethodCodeWrapper.wrapMethodCode(Native.find_java_method("edu.isi.powerloom.logic.TensorflowBatchNeuralNetwork", "pushTargetValue", new java.lang.Class [] {java.lang.Double.TYPE})), null);
      Stella.defineMethodObject("(DEFMETHOD (NTH-BATCH-KEY OBJECT) ((SELF TENSORFLOW-BATCH-NEURAL-NETWORK) (N INTEGER)))", MethodCodeWrapper.wrapMethodCode(Native.find_java_method("edu.isi.powerloom.logic.TensorflowBatchNeuralNetwork", "nthBatchKey", new java.lang.Class [] {java.lang.Integer.TYPE})), null);
      Stella.defineMethodObject("(DEFMETHOD (NTH-KTH-BATCH-INPUT-ERROR FLOAT) ((SELF TENSORFLOW-BATCH-NEURAL-NETWORK) (N INTEGER) (K INTEGER)))", MethodCodeWrapper.wrapMethodCode(Native.find_java_method("edu.isi.powerloom.logic.TensorflowBatchNeuralNetwork", "nthKthBatchInputError", new java.lang.Class [] {java.lang.Integer.TYPE, java.lang.Integer.TYPE})), null);
      Stella.defineMethodObject("(DEFMETHOD (NTH-BATCH-OUTPUT FLOAT) ((SELF TENSORFLOW-BATCH-NEURAL-NETWORK) (N INTEGER)))", MethodCodeWrapper.wrapMethodCode(Native.find_java_method("edu.isi.powerloom.logic.TensorflowBatchNeuralNetwork", "nthBatchOutput", new java.lang.Class [] {java.lang.Integer.TYPE})), null);
      Stella.defineMethodObject("(DEFMETHOD (BATCH-FORWARD-PROPAGATE-INPUTS FLOAT-ARRAY) ((SELF TENSORFLOW-BATCH-NEURAL-NETWORK)) :PUBLIC? TRUE)", MethodCodeWrapper.wrapMethodCode(Native.find_java_method("edu.isi.powerloom.logic.TensorflowBatchNeuralNetwork", "batchForwardPropagateInputs", new java.lang.Class [] {})), null);
      Stella.defineMethodObject("(DEFMETHOD BATCH-BACKWARD-PROPAGATE-ERROR ((SELF TENSORFLOW-BATCH-NEURAL-NETWORK)) :PUBLIC? TRUE)", MethodCodeWrapper.wrapMethodCode(Native.find_java_method("edu.isi.powerloom.logic.TensorflowBatchNeuralNetwork", "batchBackwardPropagateError", new java.lang.Class [] {})), null);
    }
  }

  public static void startupChameleon() {
    { Object old$Module$000 = Stella.$MODULE$.get();
      Object old$Context$000 = Stella.$CONTEXT$.get();

      try {
        Native.setSpecial(Stella.$MODULE$, Stella.getStellaModule("/LOGIC", Stella.$STARTUP_TIME_PHASE$ > 1));
        Native.setSpecial(Stella.$CONTEXT$, ((Module)(Stella.$MODULE$.get())));
        if (Stella.currentStartupTimePhaseP(2)) {
          _StartupChameleon.helpStartupChameleon1();
          _StartupChameleon.helpStartupChameleon2();
        }
        if (Stella.currentStartupTimePhaseP(4)) {
          Logic.$ALL_NEURAL_NETWORKS$ = KeyValueMap.newKeyValueMap();
          Logic.$CHAMELEON_NEURAL_NETWORK_IMPLEMENTATION$ = Logic.KWD_ORIGINAL;
          Logic.$WRAPPED_CHAMELEON_DEFAULT_INPUT_VALUE$ = FloatWrapper.wrapFloat(Logic.$CHAMELEON_DEFAULT_INPUT_VALUE$);
        }
        if (Stella.currentStartupTimePhaseP(5)) {
          _StartupChameleon.helpStartupChameleon3();
        }
        if (Stella.currentStartupTimePhaseP(6)) {
          Stella.finalizeClasses();
        }
        if (Stella.currentStartupTimePhaseP(7)) {
          _StartupChameleon.helpStartupChameleon4();
          _StartupChameleon.helpStartupChameleon5();
          _StartupChameleon.helpStartupChameleon6();
          Stella.defineMethodObject("(DEFMETHOD BATCH-UPDATE-NETWORK-WEIGHTS ((SELF TENSORFLOW-BATCH-NEURAL-NETWORK)) :PUBLIC? TRUE)", MethodCodeWrapper.wrapMethodCode(Native.find_java_method("edu.isi.powerloom.logic.TensorflowBatchNeuralNetwork", "batchUpdateNetworkWeights", new java.lang.Class [] {})), null);
          Stella.defineFunctionObject("ADD-NETWORK-PROOF-DEPENDENCY-LINK", "(DEFUN ADD-NETWORK-PROOF-DEPENDENCY-LINK ((TABLE KEY-VALUE-MAP) (SUBJECT JUSTIFICATION) (OBJECT JUSTIFICATION)))", Native.find_java_method("edu.isi.powerloom.logic.Logic", "addNetworkProofDependencyLink", new java.lang.Class [] {Native.find_java_class("edu.isi.stella.KeyValueMap"), Native.find_java_class("edu.isi.powerloom.logic.Justification"), Native.find_java_class("edu.isi.powerloom.logic.Justification")}), null);
          Stella.defineFunctionObject("REMOVE-NETWORK-PROOF-DEPENDENCY-LINK", "(DEFUN REMOVE-NETWORK-PROOF-DEPENDENCY-LINK ((TABLE KEY-VALUE-MAP) (SUBJECT JUSTIFICATION) (OBJECT JUSTIFICATION)))", Native.find_java_method("edu.isi.powerloom.logic.Logic", "removeNetworkProofDependencyLink", new java.lang.Class [] {Native.find_java_class("edu.isi.stella.KeyValueMap"), Native.find_java_class("edu.isi.powerloom.logic.Justification"), Native.find_java_class("edu.isi.powerloom.logic.Justification")}), null);
          Stella.defineMethodObject("(DEFMETHOD ADD-DEPENDENT ((QUEUE NETWORK-PROOF-QUEUE) (PREREQUISITE JUSTIFICATION) (DEPENDENT JUSTIFICATION)))", MethodCodeWrapper.wrapMethodCode(Native.find_java_method("edu.isi.powerloom.logic.NetworkProofQueue", "addDependent", new java.lang.Class [] {Native.find_java_class("edu.isi.powerloom.logic.Justification"), Native.find_java_class("edu.isi.powerloom.logic.Justification")})), null);
          Stella.defineMethodObject("(DEFMETHOD REMOVE-DEPENDENT ((QUEUE NETWORK-PROOF-QUEUE) (PREREQUISITE JUSTIFICATION) (DEPENDENT JUSTIFICATION)))", MethodCodeWrapper.wrapMethodCode(Native.find_java_method("edu.isi.powerloom.logic.NetworkProofQueue", "removeDependent", new java.lang.Class [] {Native.find_java_class("edu.isi.powerloom.logic.Justification"), Native.find_java_class("edu.isi.powerloom.logic.Justification")})), null);
          Stella.defineMethodObject("(DEFMETHOD (GET-DEPENDENTS (CONS OF JUSTIFICATION)) ((QUEUE NETWORK-PROOF-QUEUE) (PREREQUISITE JUSTIFICATION)))", MethodCodeWrapper.wrapMethodCode(Native.find_java_method("edu.isi.powerloom.logic.NetworkProofQueue", "getDependents", new java.lang.Class [] {Native.find_java_class("edu.isi.powerloom.logic.Justification")})), null);
          Stella.defineMethodObject("(DEFMETHOD (HAS-DEPENDENT? BOOLEAN) ((QUEUE NETWORK-PROOF-QUEUE) (PREREQUISITE JUSTIFICATION) (DEPENDENT JUSTIFICATION)))", MethodCodeWrapper.wrapMethodCode(Native.find_java_method("edu.isi.powerloom.logic.NetworkProofQueue", "hasDependentP", new java.lang.Class [] {Native.find_java_class("edu.isi.powerloom.logic.Justification"), Native.find_java_class("edu.isi.powerloom.logic.Justification")})), null);
          Stella.defineMethodObject("(DEFMETHOD (GET-PREREQUISITES (CONS OF JUSTIFICATION)) ((QUEUE NETWORK-PROOF-QUEUE) (DEPENDENT JUSTIFICATION)))", MethodCodeWrapper.wrapMethodCode(Native.find_java_method("edu.isi.powerloom.logic.NetworkProofQueue", "getPrerequisites", new java.lang.Class [] {Native.find_java_class("edu.isi.powerloom.logic.Justification")})), null);
          Stella.defineMethodObject("(DEFMETHOD (HAS-PREREQUISITE? BOOLEAN) ((QUEUE NETWORK-PROOF-QUEUE) (DEPENDENT JUSTIFICATION) (PREREQUISITE JUSTIFICATION)))", MethodCodeWrapper.wrapMethodCode(Native.find_java_method("edu.isi.powerloom.logic.NetworkProofQueue", "hasPrerequisiteP", new java.lang.Class [] {Native.find_java_class("edu.isi.powerloom.logic.Justification"), Native.find_java_class("edu.isi.powerloom.logic.Justification")})), null);
          Stella.defineMethodObject("(DEFMETHOD BATCH-PROCESS-CACHED-NETWORK-PROOF ((QUEUE NETWORK-PROOF-QUEUE) (PROOF JUSTIFICATION)))", MethodCodeWrapper.wrapMethodCode(Native.find_java_method("edu.isi.powerloom.logic.NetworkProofQueue", "batchProcessCachedNetworkProof", new java.lang.Class [] {Native.find_java_class("edu.isi.powerloom.logic.Justification")})), null);
          Stella.defineMethodObject("(DEFMETHOD QUEUE-NETWORK-OPERATION ((QUEUE NETWORK-PROOF-QUEUE) (PROOF JUSTIFICATION)))", MethodCodeWrapper.wrapMethodCode(Native.find_java_method("edu.isi.powerloom.logic.NetworkProofQueue", "queueNetworkOperation", new java.lang.Class [] {Native.find_java_class("edu.isi.powerloom.logic.Justification")})), null);
          Stella.defineMethodObject("(DEFMETHOD EXECUTE-NETWORK-OPERATION ((QUEUE NETWORK-PROOF-QUEUE) (NET NEURAL-NETWORK) (FORCE? BOOLEAN)))", MethodCodeWrapper.wrapMethodCode(Native.find_java_method("edu.isi.powerloom.logic.NetworkProofQueue", "executeNetworkOperation", new java.lang.Class [] {Native.find_java_class("edu.isi.powerloom.logic.NeuralNetwork"), java.lang.Boolean.TYPE})), null);
          Stella.defineMethodObject("(DEFMETHOD BATCH-PROCESS-CACHED-NETWORK-PROOF ((QUEUE NETWORK-PROOF-FORWARD-QUEUE) (PROOF JUSTIFICATION)) :DOCUMENTATION \"Compute the same partial match score as the call to `compute-partial-truth'\nthat generated `proof' (which is assumed to have been compacted with a call to\n`compact-partial-proof-to-network-proof'.  The score will only be identical of course, if\nthe various networks and their weights have not yet been updated during learning.\" :PUBLIC? TRUE)", MethodCodeWrapper.wrapMethodCode(Native.find_java_method("edu.isi.powerloom.logic.NetworkProofForwardQueue", "batchProcessCachedNetworkProof", new java.lang.Class [] {Native.find_java_class("edu.isi.powerloom.logic.Justification")})), null);
          Stella.defineMethodObject("(DEFMETHOD NOTIFY-OF-COMPLETION ((QUEUE NETWORK-PROOF-QUEUE) (PROOF JUSTIFICATION) (PREREQUISITE JUSTIFICATION)) :DOCUMENTATION \"Notify `proof' that one of its `prerequisite's had its computation completed.\" :PUBLIC? TRUE)", MethodCodeWrapper.wrapMethodCode(Native.find_java_method("edu.isi.powerloom.logic.NetworkProofQueue", "notifyOfCompletion", new java.lang.Class [] {Native.find_java_class("edu.isi.powerloom.logic.Justification"), Native.find_java_class("edu.isi.powerloom.logic.Justification")})), null);
          Stella.defineMethodObject("(DEFMETHOD QUEUE-INPUT-VALUES ((QUEUE NETWORK-PROOF-QUEUE) (NET NEURAL-NETWORK) (PROOF JUSTIFICATION) (INPUTS OBJECT) (VECTORSPECS OBJECT)) :DOCUMENTATION \"Queue `inputs' in `net's input batch.  Execute the current batch if we are full.\" :PUBLIC? TRUE)", MethodCodeWrapper.wrapMethodCode(Native.find_java_method("edu.isi.powerloom.logic.NetworkProofQueue", "queueInputValues", new java.lang.Class [] {Native.find_java_class("edu.isi.powerloom.logic.NeuralNetwork"), Native.find_java_class("edu.isi.powerloom.logic.Justification"), Native.find_java_class("edu.isi.stella.Stella_Object"), Native.find_java_class("edu.isi.stella.Stella_Object")})), null);
          Stella.defineMethodObject("(DEFMETHOD QUEUE-NETWORK-OPERATION ((QUEUE NETWORK-PROOF-FORWARD-QUEUE) (PROOF JUSTIFICATION)) :PUBLIC? TRUE)", MethodCodeWrapper.wrapMethodCode(Native.find_java_method("edu.isi.powerloom.logic.NetworkProofForwardQueue", "queueNetworkOperation", new java.lang.Class [] {Native.find_java_class("edu.isi.powerloom.logic.Justification")})), null);
          Stella.defineMethodObject("(DEFMETHOD EXECUTE-NETWORK-OPERATION ((QUEUE NETWORK-PROOF-FORWARD-QUEUE) (NET NEURAL-NETWORK) (FORCE? BOOLEAN)) :PUBLIC? TRUE)", MethodCodeWrapper.wrapMethodCode(Native.find_java_method("edu.isi.powerloom.logic.NetworkProofForwardQueue", "executeNetworkOperation", new java.lang.Class [] {Native.find_java_class("edu.isi.powerloom.logic.NeuralNetwork"), java.lang.Boolean.TYPE})), null);
          Stella.defineMethodObject("(DEFMETHOD EXECUTE-ALL ((QUEUE NETWORK-PROOF-QUEUE)) :DOCUMENTATION \"Execute queued ops in `queue' until there is nothing more to do.\" :PUBLIC? TRUE)", MethodCodeWrapper.wrapMethodCode(Native.find_java_method("edu.isi.powerloom.logic.NetworkProofQueue", "executeAll", new java.lang.Class [] {})), null);
          Stella.defineExternalSlotFromStringifiedSource("(DEFSLOT JUSTIFICATION TRAINING-ERROR :RENAMES ERROR-SCORE :DOCUMENTATION \"More suggestive name for this slot which is used to store and propagate errors during training.\")");
          Stella.defineMethodObject("(DEFMETHOD BATCH-PROCESS-CACHED-NETWORK-PROOF ((QUEUE NETWORK-PROOF-BACKWARD-QUEUE) (PROOF JUSTIFICATION)) :DOCUMENTATION \"Queue and process operations for `update-network-weights' for `proof'.\" :PUBLIC? TRUE)", MethodCodeWrapper.wrapMethodCode(Native.find_java_method("edu.isi.powerloom.logic.NetworkProofBackwardQueue", "batchProcessCachedNetworkProof", new java.lang.Class [] {Native.find_java_class("edu.isi.powerloom.logic.Justification")})), null);
          Stella.defineMethodObject("(DEFMETHOD QUEUE-NETWORK-OPERATION ((QUEUE NETWORK-PROOF-BACKWARD-QUEUE) (PROOF JUSTIFICATION)) :PUBLIC? TRUE)", MethodCodeWrapper.wrapMethodCode(Native.find_java_method("edu.isi.powerloom.logic.NetworkProofBackwardQueue", "queueNetworkOperation", new java.lang.Class [] {Native.find_java_class("edu.isi.powerloom.logic.Justification")})), null);
          Stella.defineMethodObject("(DEFMETHOD EXECUTE-NETWORK-OPERATION ((QUEUE NETWORK-PROOF-BACKWARD-QUEUE) (NET NEURAL-NETWORK) (FORCE? BOOLEAN)) :PUBLIC? TRUE)", MethodCodeWrapper.wrapMethodCode(Native.find_java_method("edu.isi.powerloom.logic.NetworkProofBackwardQueue", "executeNetworkOperation", new java.lang.Class [] {Native.find_java_class("edu.isi.powerloom.logic.NeuralNetwork"), java.lang.Boolean.TYPE})), null);
          Stella.defineMethodObject("(DEFMETHOD BATCH-PROCESS-CACHED-NETWORK-PROOF ((QUEUE NETWORK-PROOF-UPDATE-QUEUE) (PROOF JUSTIFICATION)) :DOCUMENTATION \"Queue and process operations for `update-network-weights' for `proof'.\" :PUBLIC? TRUE)", MethodCodeWrapper.wrapMethodCode(Native.find_java_method("edu.isi.powerloom.logic.NetworkProofUpdateQueue", "batchProcessCachedNetworkProof", new java.lang.Class [] {Native.find_java_class("edu.isi.powerloom.logic.Justification")})), null);
          Stella.defineMethodObject("(DEFMETHOD QUEUE-NETWORK-OPERATION ((QUEUE NETWORK-PROOF-UPDATE-QUEUE) (PROOF JUSTIFICATION)) :PUBLIC? TRUE)", MethodCodeWrapper.wrapMethodCode(Native.find_java_method("edu.isi.powerloom.logic.NetworkProofUpdateQueue", "queueNetworkOperation", new java.lang.Class [] {Native.find_java_class("edu.isi.powerloom.logic.Justification")})), null);
          Stella.defineMethodObject("(DEFMETHOD EXECUTE-NETWORK-OPERATION ((QUEUE NETWORK-PROOF-UPDATE-QUEUE) (NET NEURAL-NETWORK) (FORCE? BOOLEAN)) :PUBLIC? TRUE)", MethodCodeWrapper.wrapMethodCode(Native.find_java_method("edu.isi.powerloom.logic.NetworkProofUpdateQueue", "executeNetworkOperation", new java.lang.Class [] {Native.find_java_class("edu.isi.powerloom.logic.NeuralNetwork"), java.lang.Boolean.TYPE})), null);
          Stella.defineFunctionObject("RETRIEVE-TRAINING-EXAMPLES", "(DEFUN (RETRIEVE-TRAINING-EXAMPLES (LIST OF TRAINING-EXAMPLE)) (|&REST| (OPTIONS OBJECT)) :DOCUMENTATION \"Retrieve a subset of current training examples defined via `cham/training-example'.\" :PUBLIC? TRUE :COMMAND? TRUE)", Native.find_java_method("edu.isi.powerloom.logic.Logic", "retrieveTrainingExamples", new java.lang.Class [] {Native.find_java_class("edu.isi.stella.Cons")}), Native.find_java_method("edu.isi.powerloom.logic.Logic", "retrieveTrainingExamplesEvaluatorWrapper", new java.lang.Class [] {Native.find_java_class("edu.isi.stella.Cons")}));
          Stella.defineFunctionObject("SELECT-TRAINING-EXAMPLES", "(DEFUN (SELECT-TRAINING-EXAMPLES (VECTOR OF TRAINING-EXAMPLE)) (|&REST| (OPTIONS OBJECT)) :DOCUMENTATION \"Select a subset of currently defined training examples.  Currently the selection\nis purely based on module and/or number.  Results will be shuffled if :shuffle? is TRUE (default).\" :PUBLIC? TRUE :COMMAND? TRUE)", Native.find_java_method("edu.isi.powerloom.logic.Logic", "selectTrainingExamples", new java.lang.Class [] {Native.find_java_class("edu.isi.stella.Cons")}), Native.find_java_method("edu.isi.powerloom.logic.Logic", "selectTrainingExamplesEvaluatorWrapper", new java.lang.Class [] {Native.find_java_class("edu.isi.stella.Cons")}));
          Stella.defineFunctionObject("NORMALIZE-CHAMELEON-TRAINING-OPTIONS", "(DEFUN (NORMALIZE-CHAMELEON-TRAINING-OPTIONS PROPERTY-LIST) ((OPTIONS OBJECT)) :DOCUMENTATION \"Normalize and provide defaults for `options' supplied\nto `train-chameleon-neural-networks'.\" :PUBLIC? TRUE)", Native.find_java_method("edu.isi.powerloom.logic.Logic", "normalizeChameleonTrainingOptions", new java.lang.Class [] {Native.find_java_class("edu.isi.stella.Stella_Object")}), null);
          Stella.defineFunctionObject("TRAIN-CHAMELEON-NEURAL-NETWORKS", "(DEFUN TRAIN-CHAMELEON-NEURAL-NETWORKS (|&REST| (OPTIONS OBJECT)) :DOCUMENTATION \"Train rule neural networks based on :n-train (or all) training examples looked\nup in :module/:local?.  Train for :epochs (defaults to 20) or until :error-cutoff is reached.\nPrint every :print-cycle epochs or not at all.  If :shuffle? (the default) randomly shuffle the\nselected training examples before every epoch.  If :batch?, use batch training mechanism (which\nwill fail if the current network implementation does not support it).\" :PUBLIC? TRUE :COMMAND? TRUE)", Native.find_java_method("edu.isi.powerloom.logic.Logic", "trainChameleonNeuralNetworks", new java.lang.Class [] {Native.find_java_class("edu.isi.stella.Cons")}), Native.find_java_method("edu.isi.powerloom.logic.Logic", "trainChameleonNeuralNetworksEvaluatorWrapper", new java.lang.Class [] {Native.find_java_class("edu.isi.stella.Cons")}));
          Stella.defineFunctionObject("SCORED-QUERY-SPECIALIST", "(DEFUN (SCORED-QUERY-SPECIALIST KEYWORD) ((FRAME CONTROL-FRAME) (LASTMOVE KEYWORD)))", Native.find_java_method("edu.isi.powerloom.logic.ControlFrame", "scoredQuerySpecialist", new java.lang.Class [] {Native.find_java_class("edu.isi.powerloom.logic.ControlFrame"), Native.find_java_class("edu.isi.stella.Keyword")}), null);
          Stella.defineFunctionObject("MATCH-SCORE-SPECIALIST", "(DEFUN (MATCH-SCORE-SPECIALIST KEYWORD) ((FRAME CONTROL-FRAME) (LASTMOVE KEYWORD)))", Native.find_java_method("edu.isi.powerloom.logic.ControlFrame", "matchScoreSpecialist", new java.lang.Class [] {Native.find_java_class("edu.isi.powerloom.logic.ControlFrame"), Native.find_java_class("edu.isi.stella.Keyword")}), null);
          Stella.defineFunctionObject("STARTUP-CHAMELEON", "(DEFUN STARTUP-CHAMELEON () :PUBLIC? TRUE)", Native.find_java_method("edu.isi.powerloom.logic._StartupChameleon", "startupChameleon", new java.lang.Class [] {}), null);
          { MethodSlot function = Symbol.lookupFunction(Logic.SYM_LOGIC_STARTUP_CHAMELEON);

            KeyValueList.setDynamicSlotValue(function.dynamicSlots, Logic.SYM_STELLA_METHOD_STARTUP_CLASSNAME, StringWrapper.wrapString("_StartupChameleon"), Stella.NULL_STRING_WRAPPER);
          }
        }
        if (Stella.currentStartupTimePhaseP(8)) {
          Stella.finalizeSlots();
          Stella.cleanupUnfinalizedClasses();
        }
        if (Stella.currentStartupTimePhaseP(9)) {
          Stella_Object.inModule(((StringWrapper)(Stella_Object.copyConsTree(StringWrapper.wrapString("LOGIC")))));
          Stella.defineGlobalVariableObject("(DEFGLOBAL *CHAMELEON-MODULE* MODULE NULL :DOCUMENTATION \"Namespace module for Chameleon relations\")", null);
          Stella.defineGlobalVariableObject("(DEFGLOBAL *CHAMELEON-DEFAULT-DEFAULT-SCORE* FLOAT 0.01 :DOCUMENTATION \"Default weight to use for unknown propositions that don't have a relation-specific value specified.\" :DEMON-PROPERTY \"powerloom.chameleon.defaultDefaultScore\" :PUBLIC? TRUE)", null);
          Logic.defineExplanationPhrase(Logic.KWD_MULTIPLE_PROOFS, Logic.KWD_TECHNICAL, "from multiple proofs", Stella.NIL);
          Logic.defineExplanationPhrase(Logic.KWD_MULTIPLE_PROOFS, Logic.KWD_LAY, "from multiple proofs", Stella.NIL);
          Stella.defineGlobalVariableObject("(DEFGLOBAL *ALL-NEURAL-NETWORKS* (KEY-VALUE-MAP OF INTEGER-WRAPPER (CONS OF NEURAL-NETWORK)) (NEW KEY-VALUE-MAP))", null);
          Stella.defineGlobalVariableObject("(DEFGLOBAL *CHAMELEON-NEURAL-NETWORK-IMPLEMENTATION* KEYWORD :ORIGINAL :DEMON-PROPERTY \"powerloom.chameleon.neuralNetworkImplementation\" :PUBLIC? TRUE)", null);
          Stella.defineGlobalVariableObject("(DEFGLOBAL *CHAMELEON-DEFAULT-INPUT-VALUE* FLOAT 0.0)", null);
          Stella.defineGlobalVariableObject("(DEFGLOBAL *WRAPPED-CHAMELEON-DEFAULT-INPUT-VALUE* FLOAT-WRAPPER (WRAP-FLOAT *CHAMELEON-DEFAULT-INPUT-VALUE*))", null);
          Stella.defineGlobalVariableObject("(DEFGLOBAL *NEURAL-NETWORK-BATCH-SIZE* INTEGER 128 :DEMON-PROPERTY \"powerloom.chameleon.neuralNetworkBatchSize\" :PUBLIC? TRUE)", null);
          Stella.defineGlobalVariableObject("(DEFGLOBAL *BATCH-OPERATION-COUNT* INTEGER 0)", null);
          Stella.defineGlobalVariableObject("(DEFGLOBAL *BATCH-TOTAL-COUNT* INTEGER 0)", null);
        }

      } finally {
        Stella.$CONTEXT$.set(old$Context$000);
        Stella.$MODULE$.set(old$Module$000);
      }
    }
  }

}
